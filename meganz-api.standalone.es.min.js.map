{"version":3,"sources":["crypto-es/core.js","crypto-es/enc-base64.js","crypto-es/md5.js","crypto-es/evpkdf.js","crypto-es/cipher-core.js","crypto-es/aes.js","mega-api/dependencies/crypto-es.js","crypto-es/pad-nopadding.js","crypto-es/pad-zeropadding.js","mega-api/util.js","mega-api/crypto.js","mega-api/mega-util.js","mega-api/synchronization.js","mega-api/grouped-tasks.js","mega-api/mega-api.js","mega-api/file-attributes.js","mega-api/share.js","mega-api/nodes.js","mega-api/mega.js"],"names":["Base","[object Object]","args","this","properties","Object","assign","clone","constructor","WordArray","words","sigBytes","length","super","typedArray","ArrayBuffer","Uint8Array","Int8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","buffer","byteOffset","byteLength","typedArrayByteLength","_words","i","nBytes","r","m_w","_m_w","_m_z","mask","result","Math","random","rcache","_r","push","encoder","Hex","stringify","wordArray","thisWords","thatWords","thisSigBytes","thatSigBytes","clamp","thatByte","ceil","call","slice","hexChars","bite","toString","join","hexStr","hexStrLength","parseInt","substr","Latin1","latin1Chars","String","fromCharCode","latin1Str","latin1StrLength","charCodeAt","Utf8","decodeURIComponent","escape","e","Error","parse","utf8Str","unescape","encodeURIComponent","BufferedBlockAlgorithm","_minBufferSize","_data","_nDataBytes","data","m_data","concat","doFlush","processedWords","blockSize","dataWords","dataSigBytes","nBlocksReady","max","nWordsReady","nBytesReady","min","offset","_doProcessBlock","splice","Hasher","cfg","reset","SubHasher","message","finalize","key","HMAC","_doReset","messageUpdate","_append","_process","_doFinalize","hasher","_hasher","_key","hasherBlockSize","hasherBlockSizeBytes","oKey","_oKey","iKey","_iKey","oKeyWords","iKeyWords","update","innerHash","Base64","map","_map","base64Chars","triplet","j","charAt","paddingChar","base64Str","base64StrLength","reverseMap","_reverseMap","paddingIndex","indexOf","bitsCombined","create","T","abs","sin","FF","a","b","c","d","x","s","t","n","GG","HH","II","MD5Algo","_hash","M","_M","offset_i","M_offset_i","H","M_offset_0","M_offset_1","M_offset_2","M_offset_3","M_offset_4","M_offset_5","M_offset_6","M_offset_7","M_offset_8","M_offset_9","M_offset_10","M_offset_11","M_offset_12","M_offset_13","M_offset_14","M_offset_15","nBitsTotal","nBitsLeft","nBitsTotalH","floor","nBitsTotalL","hash","H_i","_createHelper","_createHmacHelper","EvpKDFAlgo","keySize","iterations","password","salt","block","derivedKey","derivedKeyWords","Cipher","xformMode","_xformMode","_ENC_XFORM_MODE","_DEC_XFORM_MODE","SubCipher","selectCipherStrategy","PasswordBasedCipher","SerializableCipher","encrypt","decrypt","ciphertext","dataUpdate","ivSize","BlockCipherMode","cipher","iv","_cipher","_iv","Encryptor","Decryptor","xorBlock","_prevBlock","CBC","encryptBlock","thisBlock","decryptBlock","Pkcs7","blockSizeBytes","nPaddingBytes","paddingWord","paddingWords","padding","BlockCipher","mode","modeCreator","createEncryptor","createDecryptor","_mode","__creator","processBlock","finalProcessedBlocks","pad","unpad","CipherParams","cipherParams","mixIn","formatter","OpenSSLFormatter","openSSLStr","ciphertextWords","_cfg","encryptor","cipherCfg","algorithm","format","_ciphertext","_parse","OpenSSLKdf","_salt","compute","derivedParams","kdf","execute","_SBOX","INV_SBOX","_SUB_MIX_0","_SUB_MIX_1","_SUB_MIX_2","_SUB_MIX_3","INV_SUB_MIX_0","INV_SUB_MIX_1","INV_SUB_MIX_2","INV_SUB_MIX_3","xi","sx","x2","x4","x8","RCON","AESAlgo","_nRounds","_keyPriorReset","keyWords","ksRows","_keySchedule","keySchedule","ksRow","_invKeySchedule","invKeySchedule","invKsRow","_doCryptBlock","SUB_MIX_0","SUB_MIX_1","SUB_MIX_2","SUB_MIX_3","SBOX","nRounds","s0","s1","s2","s3","round","t0","t1","t2","t3","CryptoES","AES","lib","NoPadding","ZeroPadding","enc","Util","base64","atob","console","error","binaryString","btoa","arrayBuffer","TextDecoder","decode","reduce","accumulator","byte","u8Array","base64ToBinaryString","binaryStringToArrayBuffer","arrayBufferToBinaryString","binaryStringToBase64","byteToHex","ByteToHexTable","get","hexOctets","Array","self","inited","init","hexOctet","padStart","previousValue","currentValue","index","Number","MAX_SAFE_INTEGER","seconds","date","Date","str","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","bytes","decimals","log","parseFloat","pow","toFixed","ms","inNextEventLoopTask","nextEventLoopTask","Promise","resolve","setTimeout","setImmediate","url","searchParams","entries","forEach","value","append","executable","count","delay","sleep","name","includes","replace","array1","array2","string","TextEncoder","encode","arrayBufferToBase64","base64ToArrayBuffer","stream","reader","getReader","done","read","globalThis","port1","port2","MessageChannel","queue","onmessage","shift","callback","postMessage","object","Crypto","_arrayBufferToWordArray4","trunc","view","DataView","getInt32","CryptoJS","setInt32","_wordArrayToArrayBuffer2","MegaUtil","attributesEncoded","nodeKey","attributesEncrypted","megaBase64ToArrayBuffer","attributesArrayBuffer","decryptAES","trimmedAttributesPlaneString","arrayBufferToUtf8String","substring","serializedFingerprint","JSON","fingerprintBytes","fileChecksum","subarray","timeBytesLength","timeBytes","modificationDate","arrayBufferToLong","decryptedKey","metaMac","encryptedKey","decryptedBlock","set","megaBase64EncodedStr","paddingLength","_getPaddingLengthForMegaBase64","repeat","megaBase64","megaBase64ToBase64","base64EncodedStr","base64ToMegaBase64","k","Semaphore","limit","time","isDisabled","completed","completeTimes","active","performance","now","pending","_release","then","warn","acquire","release","_limit","_delay","releaseAll","semaphore","disable","CountDownLatch","_count","_promise","_resolve","released","CountUpAndDownLatch","synchronization","EntriesHolder","entryKey","firstEntry","groupedTasks","first","pullEntries","pullParts","GroupedTasks","entryClass","delayStrategy","SimpleEntry","afterDelayWithMicroTask","reject","Map","entry","needHandle","enqueue","getResult","getKey","has","handle","catch","array","delete","pos","entriesHolder","MegaApi","errorRepeatCount","errorRepeatDelay","repeatIfErrorAsync","pull","payloads","getValue","responseArray","requestApiSafe","RequestApiGrouped","payload","grouped","_url","URL","apiGateway","addSearchParamsToURL","requestApiGrouped","response","_","requestApiUnsafe","apiErrorHandler","fetch","method","body","referrerPolicy","status","text","isArray","id","type","requestApi","fah","ssl","ids","selectedIdsBinary","responseBytes","async","headers","connection","shareId","responseData","p","g","prettyResponse","size","nodeAttributesEncoded","downloadUrl","timeLeft","EFQ","MSD","fileAttributesStr","ca","f","rawNodes","sn","noc","shareRootNodeId","firstNode","match","_getShareRootNodeId","_prettifyType","_parseKeyFromNode","node","decryptionKeyStr","nodes","prettyNode","parentId","ownerId","attributes","creationDate","_prettifyNodes","rootId","FileAttribute","bunch","Bunch","of","cached","Types","hasBytes","getDownloadUrl","values","_bunch","fileAttribute","hasDownloadUrl","requestFileAttributeDownloadUrl","Boolean","preview","thumbnail","FileAttributeBytes","DlUrlRequests","RequestDlUrlEntry","_fileAttribute","FileAttributes","byType","dlUrlRequests","parts","sync","handlePart","fileAttributeId","fileAttrIDs","keys","generator","fileAttributeBytes","dataBytes","resolvers","DlBytesRequests","_downloadUrl","dlBytesRequests","requestFileAttributeBytes","parseBytes","idBytes","lengthBytes","arrayBufferToMegaBase64","fileAttributes","encryptedBytes","_fileAttributes","_encryptedBytes","getEncryptedBytes","strictMode","split","chunk","groups","find","att","add","getAttribute","Thumbnail","Preview","typeClass","getBytes","Share","shareParts","isFolder","selectedFolderId","selectedFileId","getUrl","fromUrl","selectedId","regExp","folder","file","oldFormat","prefixes","selected","BasicFolderShareNode","Symbol","toStringTag","masterKey","parent","decryptionKeyEncrypted","_decryptionKey","decryptKey","path","root","FileNode","parseEncodedNodeAttributes","parseFingerprint","_keyParts","decryptionKeyToParts","mtime","modificationDateFormatted","secondsToFormattedString","MediaFileNode","getThumbnail","getPreview","FolderNode","_size","RootFolderNode","SharedFileNode","share","nodeInfo","decryptionKey","_meta","SharedMediaFileNode","Nodes","getFolderNodes","getSharedNode","requestNodeInfo","requestFolderInfo","folders","files","resultNode","resultArray","defineProperty"],"mappings":"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","sourcesContent":["/* eslint-disable no-use-before-define */\n\n/**\n * Base class for inheritance.\n */\nexport class Base {\n  /**\n   * Extends this object and runs the init method.\n   * Arguments to create() will be passed to init().\n   *\n   * @return {Object} The new object.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var instance = MyType.create();\n   */\n  static create(...args) {\n    return new this(...args);\n  }\n\n  /**\n   * Copies properties into this object.\n   *\n   * @param {Object} properties The properties to mix in.\n   *\n   * @example\n   *\n   *     MyType.mixIn({\n   *         field: 'value'\n   *     });\n   */\n  mixIn(properties) {\n    return Object.assign(this, properties);\n  }\n\n  /**\n   * Creates a copy of this object.\n   *\n   * @return {Object} The clone.\n   *\n   * @example\n   *\n   *     var clone = instance.clone();\n   */\n  clone() {\n    const clone = new this.constructor();\n    Object.assign(clone, this);\n    return clone;\n  }\n}\n\n/**\n * An array of 32-bit words.\n *\n * @property {Array} words The array of 32-bit words.\n * @property {number} sigBytes The number of significant bytes in this word array.\n */\nexport class WordArray extends Base {\n  /**\n   * Initializes a newly created word array.\n   *\n   * @param {Array} words (Optional) An array of 32-bit words.\n   * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.lib.WordArray.create();\n   *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n   *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n   */\n  constructor(words = [], sigBytes = words.length * 4) {\n    super();\n\n    let typedArray = words;\n    // Convert buffers to uint8\n    if (typedArray instanceof ArrayBuffer) {\n      typedArray = new Uint8Array(typedArray);\n    }\n\n    // Convert other array views to uint8\n    if (\n      typedArray instanceof Int8Array\n      || typedArray instanceof Uint8ClampedArray\n      || typedArray instanceof Int16Array\n      || typedArray instanceof Uint16Array\n      || typedArray instanceof Int32Array\n      || typedArray instanceof Uint32Array\n      || typedArray instanceof Float32Array\n      || typedArray instanceof Float64Array\n    ) {\n      typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\n    }\n\n    // Handle Uint8Array\n    if (typedArray instanceof Uint8Array) {\n      // Shortcut\n      const typedArrayByteLength = typedArray.byteLength;\n\n      // Extract bytes\n      const _words = [];\n      for (let i = 0; i < typedArrayByteLength; i += 1) {\n        _words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);\n      }\n\n      // Initialize this word array\n      this.words = _words;\n      this.sigBytes = typedArrayByteLength;\n    } else {\n      // Else call normal init\n      this.words = words;\n      this.sigBytes = sigBytes;\n    }\n  }\n\n  /**\n   * Creates a word array filled with random bytes.\n   *\n   * @param {number} nBytes The number of random bytes to generate.\n   *\n   * @return {WordArray} The random word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.lib.WordArray.random(16);\n   */\n  static random(nBytes) {\n    const words = [];\n\n    const r = (m_w) => {\n      let _m_w = m_w;\n      let _m_z = 0x3ade68b1;\n      const mask = 0xffffffff;\n\n      return () => {\n        _m_z = (0x9069 * (_m_z & 0xFFFF) + (_m_z >> 0x10)) & mask;\n        _m_w = (0x4650 * (_m_w & 0xFFFF) + (_m_w >> 0x10)) & mask;\n        let result = ((_m_z << 0x10) + _m_w) & mask;\n        result /= 0x100000000;\n        result += 0.5;\n        return result * (Math.random() > 0.5 ? 1 : -1);\n      };\n    };\n\n    for (let i = 0, rcache; i < nBytes; i += 4) {\n      const _r = r((rcache || Math.random()) * 0x100000000);\n\n      rcache = _r() * 0x3ade67b7;\n      words.push((_r() * 0x100000000) | 0);\n    }\n\n    return new WordArray(words, nBytes);\n  }\n\n  /**\n   * Converts this word array to a string.\n   *\n   * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n   *\n   * @return {string} The stringified word array.\n   *\n   * @example\n   *\n   *     var string = wordArray + '';\n   *     var string = wordArray.toString();\n   *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n   */\n  toString(encoder = Hex) {\n    return encoder.stringify(this);\n  }\n\n  /**\n   * Concatenates a word array to this word array.\n   *\n   * @param {WordArray} wordArray The word array to append.\n   *\n   * @return {WordArray} This word array.\n   *\n   * @example\n   *\n   *     wordArray1.concat(wordArray2);\n   */\n  concat(wordArray) {\n    // Shortcuts\n    const thisWords = this.words;\n    const thatWords = wordArray.words;\n    const thisSigBytes = this.sigBytes;\n    const thatSigBytes = wordArray.sigBytes;\n\n    // Clamp excess bits\n    this.clamp();\n\n    // Concat\n    if (thisSigBytes % 4) {\n      // Copy one byte at a time\n      for (let i = 0; i < thatSigBytes; i += 1) {\n        const thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n        thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\n      }\n    } else {\n      // Copy one word at a time\n      for (let i = 0; i < thatSigBytes; i += 4) {\n        thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];\n      }\n    }\n    this.sigBytes += thatSigBytes;\n\n    // Chainable\n    return this;\n  }\n\n  /**\n   * Removes insignificant bits.\n   *\n   * @example\n   *\n   *     wordArray.clamp();\n   */\n  clamp() {\n    // Shortcuts\n    const { words, sigBytes } = this;\n\n    // Clamp\n    words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\n    words.length = Math.ceil(sigBytes / 4);\n  }\n\n  /**\n   * Creates a copy of this word array.\n   *\n   * @return {WordArray} The clone.\n   *\n   * @example\n   *\n   *     var clone = wordArray.clone();\n   */\n  clone() {\n    const clone = super.clone.call(this);\n    clone.words = this.words.slice(0);\n\n    return clone;\n  }\n}\n\n/**\n * Hex encoding strategy.\n */\nexport const Hex = {\n  /**\n   * Converts a word array to a hex string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The hex string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n   */\n  stringify(wordArray) {\n    // Shortcuts\n    const { words, sigBytes } = wordArray;\n\n    // Convert\n    const hexChars = [];\n    for (let i = 0; i < sigBytes; i += 1) {\n      const bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n      hexChars.push((bite >>> 4).toString(16));\n      hexChars.push((bite & 0x0f).toString(16));\n    }\n\n    return hexChars.join('');\n  },\n\n  /**\n   * Converts a hex string to a word array.\n   *\n   * @param {string} hexStr The hex string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n   */\n  parse(hexStr) {\n    // Shortcut\n    const hexStrLength = hexStr.length;\n\n    // Convert\n    const words = [];\n    for (let i = 0; i < hexStrLength; i += 2) {\n      words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n    }\n\n    return new WordArray(words, hexStrLength / 2);\n  },\n};\n\n/**\n * Latin1 encoding strategy.\n */\nexport const Latin1 = {\n  /**\n   * Converts a word array to a Latin1 string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The Latin1 string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n   */\n  stringify(wordArray) {\n    // Shortcuts\n    const { words, sigBytes } = wordArray;\n\n    // Convert\n    const latin1Chars = [];\n    for (let i = 0; i < sigBytes; i += 1) {\n      const bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n      latin1Chars.push(String.fromCharCode(bite));\n    }\n\n    return latin1Chars.join('');\n  },\n\n  /**\n   * Converts a Latin1 string to a word array.\n   *\n   * @param {string} latin1Str The Latin1 string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n   */\n  parse(latin1Str) {\n    // Shortcut\n    const latin1StrLength = latin1Str.length;\n\n    // Convert\n    const words = [];\n    for (let i = 0; i < latin1StrLength; i += 1) {\n      words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n    }\n\n    return new WordArray(words, latin1StrLength);\n  },\n};\n\n/**\n * UTF-8 encoding strategy.\n */\nexport const Utf8 = {\n  /**\n   * Converts a word array to a UTF-8 string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The UTF-8 string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n   */\n  stringify(wordArray) {\n    try {\n      return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n    } catch (e) {\n      throw new Error('Malformed UTF-8 data');\n    }\n  },\n\n  /**\n   * Converts a UTF-8 string to a word array.\n   *\n   * @param {string} utf8Str The UTF-8 string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n   */\n  parse(utf8Str) {\n    return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n  },\n};\n\n/**\n * Abstract buffered block algorithm template.\n *\n * The property blockSize must be implemented in a concrete subtype.\n *\n * @property {number} _minBufferSize\n *\n *     The number of blocks that should be kept unprocessed in the buffer. Default: 0\n */\nexport class BufferedBlockAlgorithm extends Base {\n  constructor() {\n    super();\n    this._minBufferSize = 0;\n  }\n\n  /**\n   * Resets this block algorithm's data buffer to its initial state.\n   *\n   * @example\n   *\n   *     bufferedBlockAlgorithm.reset();\n   */\n  reset() {\n    // Initial values\n    this._data = new WordArray();\n    this._nDataBytes = 0;\n  }\n\n  /**\n   * Adds new data to this block algorithm's buffer.\n   *\n   * @param {WordArray|string} data\n   *\n   *     The data to append. Strings are converted to a WordArray using UTF-8.\n   *\n   * @example\n   *\n   *     bufferedBlockAlgorithm._append('data');\n   *     bufferedBlockAlgorithm._append(wordArray);\n   */\n  _append(data) {\n    let m_data = data;\n\n    // Convert string to WordArray, else assume WordArray already\n    if (typeof m_data === 'string') {\n      m_data = Utf8.parse(m_data);\n    }\n\n    // Append\n    this._data.concat(m_data);\n    this._nDataBytes += m_data.sigBytes;\n  }\n\n  /**\n   * Processes available data blocks.\n   *\n   * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n   *\n   * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n   *\n   * @return {WordArray} The processed data.\n   *\n   * @example\n   *\n   *     var processedData = bufferedBlockAlgorithm._process();\n   *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n   */\n  _process(doFlush) {\n    let processedWords;\n\n    // Shortcuts\n    const { _data: data, blockSize } = this;\n    const dataWords = data.words;\n    const dataSigBytes = data.sigBytes;\n    const blockSizeBytes = blockSize * 4;\n\n    // Count blocks ready\n    let nBlocksReady = dataSigBytes / blockSizeBytes;\n    if (doFlush) {\n      // Round up to include partial blocks\n      nBlocksReady = Math.ceil(nBlocksReady);\n    } else {\n      // Round down to include only full blocks,\n      // less the number of blocks that must remain in the buffer\n      nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n    }\n\n    // Count words ready\n    const nWordsReady = nBlocksReady * blockSize;\n\n    // Count bytes ready\n    const nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n    // Process blocks\n    if (nWordsReady) {\n      for (let offset = 0; offset < nWordsReady; offset += blockSize) {\n        // Perform concrete-algorithm logic\n        this._doProcessBlock(dataWords, offset);\n      }\n\n      // Remove processed words\n      processedWords = dataWords.splice(0, nWordsReady);\n      data.sigBytes -= nBytesReady;\n    }\n\n    // Return processed words\n    return new WordArray(processedWords, nBytesReady);\n  }\n\n  /**\n   * Creates a copy of this object.\n   *\n   * @return {Object} The clone.\n   *\n   * @example\n   *\n   *     var clone = bufferedBlockAlgorithm.clone();\n   */\n  clone() {\n    const clone = super.clone.call(this);\n    clone._data = this._data.clone();\n\n    return clone;\n  }\n}\n\n/**\n * Abstract hasher template.\n *\n * @property {number} blockSize\n *\n *     The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n */\nexport class Hasher extends BufferedBlockAlgorithm {\n  constructor(cfg) {\n    super();\n\n    this.blockSize = 512 / 32;\n\n    /**\n     * Configuration options.\n     */\n    this.cfg = Object.assign(new Base(), cfg);\n\n    // Set initial values\n    this.reset();\n  }\n\n  /**\n   * Creates a shortcut function to a hasher's object interface.\n   *\n   * @param {Hasher} SubHasher The hasher to create a helper for.\n   *\n   * @return {Function} The shortcut function.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n   */\n  static _createHelper(SubHasher) {\n    return (message, cfg) => new SubHasher(cfg).finalize(message);\n  }\n\n  /**\n   * Creates a shortcut function to the HMAC's object interface.\n   *\n   * @param {Hasher} SubHasher The hasher to use in this HMAC helper.\n   *\n   * @return {Function} The shortcut function.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n   */\n  static _createHmacHelper(SubHasher) {\n    return (message, key) => new HMAC(SubHasher, key).finalize(message);\n  }\n\n  /**\n   * Resets this hasher to its initial state.\n   *\n   * @example\n   *\n   *     hasher.reset();\n   */\n  reset() {\n    // Reset data buffer\n    super.reset.call(this);\n\n    // Perform concrete-hasher logic\n    this._doReset();\n  }\n\n  /**\n   * Updates this hasher with a message.\n   *\n   * @param {WordArray|string} messageUpdate The message to append.\n   *\n   * @return {Hasher} This hasher.\n   *\n   * @example\n   *\n   *     hasher.update('message');\n   *     hasher.update(wordArray);\n   */\n  update(messageUpdate) {\n    // Append\n    this._append(messageUpdate);\n\n    // Update the hash\n    this._process();\n\n    // Chainable\n    return this;\n  }\n\n  /**\n   * Finalizes the hash computation.\n   * Note that the finalize operation is effectively a destructive, read-once operation.\n   *\n   * @param {WordArray|string} messageUpdate (Optional) A final message update.\n   *\n   * @return {WordArray} The hash.\n   *\n   * @example\n   *\n   *     var hash = hasher.finalize();\n   *     var hash = hasher.finalize('message');\n   *     var hash = hasher.finalize(wordArray);\n   */\n  finalize(messageUpdate) {\n    // Final message update\n    if (messageUpdate) {\n      this._append(messageUpdate);\n    }\n\n    // Perform concrete-hasher logic\n    const hash = this._doFinalize();\n\n    return hash;\n  }\n}\n\n/**\n * HMAC algorithm.\n */\nexport class HMAC extends Base {\n  /**\n   * Initializes a newly created HMAC.\n   *\n   * @param {Hasher} SubHasher The hash algorithm to use.\n   * @param {WordArray|string} key The secret key.\n   *\n   * @example\n   *\n   *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n   */\n  constructor(SubHasher, key) {\n    super();\n\n    const hasher = new SubHasher();\n    this._hasher = hasher;\n\n    // Convert string to WordArray, else assume WordArray already\n    let _key = key;\n    if (typeof _key === 'string') {\n      _key = Utf8.parse(_key);\n    }\n\n    // Shortcuts\n    const hasherBlockSize = hasher.blockSize;\n    const hasherBlockSizeBytes = hasherBlockSize * 4;\n\n    // Allow arbitrary length keys\n    if (_key.sigBytes > hasherBlockSizeBytes) {\n      _key = hasher.finalize(key);\n    }\n\n    // Clamp excess bits\n    _key.clamp();\n\n    // Clone key for inner and outer pads\n    const oKey = _key.clone();\n    this._oKey = oKey;\n    const iKey = _key.clone();\n    this._iKey = iKey;\n\n    // Shortcuts\n    const oKeyWords = oKey.words;\n    const iKeyWords = iKey.words;\n\n    // XOR keys with pad constants\n    for (let i = 0; i < hasherBlockSize; i += 1) {\n      oKeyWords[i] ^= 0x5c5c5c5c;\n      iKeyWords[i] ^= 0x36363636;\n    }\n    oKey.sigBytes = hasherBlockSizeBytes;\n    iKey.sigBytes = hasherBlockSizeBytes;\n\n    // Set initial values\n    this.reset();\n  }\n\n  /**\n   * Resets this HMAC to its initial state.\n   *\n   * @example\n   *\n   *     hmacHasher.reset();\n   */\n  reset() {\n    // Shortcut\n    const hasher = this._hasher;\n\n    // Reset\n    hasher.reset();\n    hasher.update(this._iKey);\n  }\n\n  /**\n   * Updates this HMAC with a message.\n   *\n   * @param {WordArray|string} messageUpdate The message to append.\n   *\n   * @return {HMAC} This HMAC instance.\n   *\n   * @example\n   *\n   *     hmacHasher.update('message');\n   *     hmacHasher.update(wordArray);\n   */\n  update(messageUpdate) {\n    this._hasher.update(messageUpdate);\n\n    // Chainable\n    return this;\n  }\n\n  /**\n   * Finalizes the HMAC computation.\n   * Note that the finalize operation is effectively a destructive, read-once operation.\n   *\n   * @param {WordArray|string} messageUpdate (Optional) A final message update.\n   *\n   * @return {WordArray} The HMAC.\n   *\n   * @example\n   *\n   *     var hmac = hmacHasher.finalize();\n   *     var hmac = hmacHasher.finalize('message');\n   *     var hmac = hmacHasher.finalize(wordArray);\n   */\n  finalize(messageUpdate) {\n    // Shortcut\n    const hasher = this._hasher;\n\n    // Compute HMAC\n    const innerHash = hasher.finalize(messageUpdate);\n    hasher.reset();\n    const hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n\n    return hmac;\n  }\n}\n","import {\n  WordArray,\n} from './core.js';\n\nconst parseLoop = (base64Str, base64StrLength, reverseMap) => {\n  const words = [];\n  let nBytes = 0;\n  for (let i = 0; i < base64StrLength; i += 1) {\n    if (i % 4) {\n      const bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);\n      const bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);\n      const bitsCombined = bits1 | bits2;\n      words[nBytes >>> 2] |= bitsCombined << (24 - (nBytes % 4) * 8);\n      nBytes += 1;\n    }\n  }\n  return WordArray.create(words, nBytes);\n};\n\n/**\n * Base64 encoding strategy.\n */\nexport const Base64 = {\n  /**\n   * Converts a word array to a Base64 string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The Base64 string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const base64String = CryptoJS.enc.Base64.stringify(wordArray);\n   */\n  stringify(wordArray) {\n    // Shortcuts\n    const { words, sigBytes } = wordArray;\n    const map = this._map;\n\n    // Clamp excess bits\n    wordArray.clamp();\n\n    // Convert\n    const base64Chars = [];\n    for (let i = 0; i < sigBytes; i += 3) {\n      const byte1 = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n      const byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\n      const byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\n\n      const triplet = (byte1 << 16) | (byte2 << 8) | byte3;\n\n      for (let j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j += 1) {\n        base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\n      }\n    }\n\n    // Add padding\n    const paddingChar = map.charAt(64);\n    if (paddingChar) {\n      while (base64Chars.length % 4) {\n        base64Chars.push(paddingChar);\n      }\n    }\n\n    return base64Chars.join('');\n  },\n\n  /**\n   * Converts a Base64 string to a word array.\n   *\n   * @param {string} base64Str The Base64 string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const wordArray = CryptoJS.enc.Base64.parse(base64String);\n   */\n  parse(base64Str) {\n    // Shortcuts\n    let base64StrLength = base64Str.length;\n    const map = this._map;\n    let reverseMap = this._reverseMap;\n\n    if (!reverseMap) {\n      this._reverseMap = [];\n      reverseMap = this._reverseMap;\n      for (let j = 0; j < map.length; j += 1) {\n        reverseMap[map.charCodeAt(j)] = j;\n      }\n    }\n\n    // Ignore padding\n    const paddingChar = map.charAt(64);\n    if (paddingChar) {\n      const paddingIndex = base64Str.indexOf(paddingChar);\n      if (paddingIndex !== -1) {\n        base64StrLength = paddingIndex;\n      }\n    }\n\n    // Convert\n    return parseLoop(base64Str, base64StrLength, reverseMap);\n  },\n\n  _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n};\n","import {\n  WordArray,\n  Hasher,\n} from './core.js';\n\n// Constants table\nconst T = [];\n\n// Compute constants\nfor (let i = 0; i < 64; i += 1) {\n  T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;\n}\n\nconst FF = (a, b, c, d, x, s, t) => {\n  const n = a + ((b & c) | (~b & d)) + x + t;\n  return ((n << s) | (n >>> (32 - s))) + b;\n};\n\nconst GG = (a, b, c, d, x, s, t) => {\n  const n = a + ((b & d) | (c & ~d)) + x + t;\n  return ((n << s) | (n >>> (32 - s))) + b;\n};\n\nconst HH = (a, b, c, d, x, s, t) => {\n  const n = a + (b ^ c ^ d) + x + t;\n  return ((n << s) | (n >>> (32 - s))) + b;\n};\n\nconst II = (a, b, c, d, x, s, t) => {\n  const n = a + (c ^ (b | ~d)) + x + t;\n  return ((n << s) | (n >>> (32 - s))) + b;\n};\n\n/**\n * MD5 hash algorithm.\n */\nexport class MD5Algo extends Hasher {\n  _doReset() {\n    this._hash = new WordArray([\n      0x67452301,\n      0xefcdab89,\n      0x98badcfe,\n      0x10325476,\n    ]);\n  }\n\n  _doProcessBlock(M, offset) {\n    const _M = M;\n\n    // Swap endian\n    for (let i = 0; i < 16; i += 1) {\n      // Shortcuts\n      const offset_i = offset + i;\n      const M_offset_i = M[offset_i];\n\n      _M[offset_i] = (\n        (((M_offset_i << 8) | (M_offset_i >>> 24)) & 0x00ff00ff)\n          | (((M_offset_i << 24) | (M_offset_i >>> 8)) & 0xff00ff00)\n      );\n    }\n\n    // Shortcuts\n    const H = this._hash.words;\n\n    const M_offset_0 = _M[offset + 0];\n    const M_offset_1 = _M[offset + 1];\n    const M_offset_2 = _M[offset + 2];\n    const M_offset_3 = _M[offset + 3];\n    const M_offset_4 = _M[offset + 4];\n    const M_offset_5 = _M[offset + 5];\n    const M_offset_6 = _M[offset + 6];\n    const M_offset_7 = _M[offset + 7];\n    const M_offset_8 = _M[offset + 8];\n    const M_offset_9 = _M[offset + 9];\n    const M_offset_10 = _M[offset + 10];\n    const M_offset_11 = _M[offset + 11];\n    const M_offset_12 = _M[offset + 12];\n    const M_offset_13 = _M[offset + 13];\n    const M_offset_14 = _M[offset + 14];\n    const M_offset_15 = _M[offset + 15];\n\n    // Working varialbes\n    let a = H[0];\n    let b = H[1];\n    let c = H[2];\n    let d = H[3];\n\n    // Computation\n    a = FF(a, b, c, d, M_offset_0, 7, T[0]);\n    d = FF(d, a, b, c, M_offset_1, 12, T[1]);\n    c = FF(c, d, a, b, M_offset_2, 17, T[2]);\n    b = FF(b, c, d, a, M_offset_3, 22, T[3]);\n    a = FF(a, b, c, d, M_offset_4, 7, T[4]);\n    d = FF(d, a, b, c, M_offset_5, 12, T[5]);\n    c = FF(c, d, a, b, M_offset_6, 17, T[6]);\n    b = FF(b, c, d, a, M_offset_7, 22, T[7]);\n    a = FF(a, b, c, d, M_offset_8, 7, T[8]);\n    d = FF(d, a, b, c, M_offset_9, 12, T[9]);\n    c = FF(c, d, a, b, M_offset_10, 17, T[10]);\n    b = FF(b, c, d, a, M_offset_11, 22, T[11]);\n    a = FF(a, b, c, d, M_offset_12, 7, T[12]);\n    d = FF(d, a, b, c, M_offset_13, 12, T[13]);\n    c = FF(c, d, a, b, M_offset_14, 17, T[14]);\n    b = FF(b, c, d, a, M_offset_15, 22, T[15]);\n\n    a = GG(a, b, c, d, M_offset_1, 5, T[16]);\n    d = GG(d, a, b, c, M_offset_6, 9, T[17]);\n    c = GG(c, d, a, b, M_offset_11, 14, T[18]);\n    b = GG(b, c, d, a, M_offset_0, 20, T[19]);\n    a = GG(a, b, c, d, M_offset_5, 5, T[20]);\n    d = GG(d, a, b, c, M_offset_10, 9, T[21]);\n    c = GG(c, d, a, b, M_offset_15, 14, T[22]);\n    b = GG(b, c, d, a, M_offset_4, 20, T[23]);\n    a = GG(a, b, c, d, M_offset_9, 5, T[24]);\n    d = GG(d, a, b, c, M_offset_14, 9, T[25]);\n    c = GG(c, d, a, b, M_offset_3, 14, T[26]);\n    b = GG(b, c, d, a, M_offset_8, 20, T[27]);\n    a = GG(a, b, c, d, M_offset_13, 5, T[28]);\n    d = GG(d, a, b, c, M_offset_2, 9, T[29]);\n    c = GG(c, d, a, b, M_offset_7, 14, T[30]);\n    b = GG(b, c, d, a, M_offset_12, 20, T[31]);\n\n    a = HH(a, b, c, d, M_offset_5, 4, T[32]);\n    d = HH(d, a, b, c, M_offset_8, 11, T[33]);\n    c = HH(c, d, a, b, M_offset_11, 16, T[34]);\n    b = HH(b, c, d, a, M_offset_14, 23, T[35]);\n    a = HH(a, b, c, d, M_offset_1, 4, T[36]);\n    d = HH(d, a, b, c, M_offset_4, 11, T[37]);\n    c = HH(c, d, a, b, M_offset_7, 16, T[38]);\n    b = HH(b, c, d, a, M_offset_10, 23, T[39]);\n    a = HH(a, b, c, d, M_offset_13, 4, T[40]);\n    d = HH(d, a, b, c, M_offset_0, 11, T[41]);\n    c = HH(c, d, a, b, M_offset_3, 16, T[42]);\n    b = HH(b, c, d, a, M_offset_6, 23, T[43]);\n    a = HH(a, b, c, d, M_offset_9, 4, T[44]);\n    d = HH(d, a, b, c, M_offset_12, 11, T[45]);\n    c = HH(c, d, a, b, M_offset_15, 16, T[46]);\n    b = HH(b, c, d, a, M_offset_2, 23, T[47]);\n\n    a = II(a, b, c, d, M_offset_0, 6, T[48]);\n    d = II(d, a, b, c, M_offset_7, 10, T[49]);\n    c = II(c, d, a, b, M_offset_14, 15, T[50]);\n    b = II(b, c, d, a, M_offset_5, 21, T[51]);\n    a = II(a, b, c, d, M_offset_12, 6, T[52]);\n    d = II(d, a, b, c, M_offset_3, 10, T[53]);\n    c = II(c, d, a, b, M_offset_10, 15, T[54]);\n    b = II(b, c, d, a, M_offset_1, 21, T[55]);\n    a = II(a, b, c, d, M_offset_8, 6, T[56]);\n    d = II(d, a, b, c, M_offset_15, 10, T[57]);\n    c = II(c, d, a, b, M_offset_6, 15, T[58]);\n    b = II(b, c, d, a, M_offset_13, 21, T[59]);\n    a = II(a, b, c, d, M_offset_4, 6, T[60]);\n    d = II(d, a, b, c, M_offset_11, 10, T[61]);\n    c = II(c, d, a, b, M_offset_2, 15, T[62]);\n    b = II(b, c, d, a, M_offset_9, 21, T[63]);\n\n    // Intermediate hash value\n    H[0] = (H[0] + a) | 0;\n    H[1] = (H[1] + b) | 0;\n    H[2] = (H[2] + c) | 0;\n    H[3] = (H[3] + d) | 0;\n  }\n  /* eslint-ensable no-param-reassign */\n\n  _doFinalize() {\n    // Shortcuts\n    const data = this._data;\n    const dataWords = data.words;\n\n    const nBitsTotal = this._nDataBytes * 8;\n    const nBitsLeft = data.sigBytes * 8;\n\n    // Add padding\n    dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - (nBitsLeft % 32));\n\n    const nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);\n    const nBitsTotalL = nBitsTotal;\n    dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (\n      (((nBitsTotalH << 8) | (nBitsTotalH >>> 24)) & 0x00ff00ff)\n        | (((nBitsTotalH << 24) | (nBitsTotalH >>> 8)) & 0xff00ff00)\n    );\n    dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (\n      (((nBitsTotalL << 8) | (nBitsTotalL >>> 24)) & 0x00ff00ff)\n        | (((nBitsTotalL << 24) | (nBitsTotalL >>> 8)) & 0xff00ff00)\n    );\n\n    data.sigBytes = (dataWords.length + 1) * 4;\n\n    // Hash final blocks\n    this._process();\n\n    // Shortcuts\n    const hash = this._hash;\n    const H = hash.words;\n\n    // Swap endian\n    for (let i = 0; i < 4; i += 1) {\n      // Shortcut\n      const H_i = H[i];\n\n      H[i] = (((H_i << 8) | (H_i >>> 24)) & 0x00ff00ff)\n        | (((H_i << 24) | (H_i >>> 8)) & 0xff00ff00);\n    }\n\n    // Return final computed hash\n    return hash;\n  }\n\n  clone() {\n    const clone = super.clone.call(this);\n    clone._hash = this._hash.clone();\n\n    return clone;\n  }\n}\n\n/**\n * Shortcut function to the hasher's object interface.\n *\n * @param {WordArray|string} message The message to hash.\n *\n * @return {WordArray} The hash.\n *\n * @static\n *\n * @example\n *\n *     var hash = CryptoJS.MD5('message');\n *     var hash = CryptoJS.MD5(wordArray);\n */\nexport const MD5 = Hasher._createHelper(MD5Algo);\n\n/**\n * Shortcut function to the HMAC's object interface.\n *\n * @param {WordArray|string} message The message to hash.\n * @param {WordArray|string} key The secret key.\n *\n * @return {WordArray} The HMAC.\n *\n * @static\n *\n * @example\n *\n *     var hmac = CryptoJS.HmacMD5(message, key);\n */\nexport const HmacMD5 = Hasher._createHmacHelper(MD5Algo);\n","import {\n  Base,\n  WordArray,\n} from './core.js';\nimport { MD5Algo } from './md5.js';\n\n/**\n * This key derivation function is meant to conform with EVP_BytesToKey.\n * www.openssl.org/docs/crypto/EVP_BytesToKey.html\n */\nexport class EvpKDFAlgo extends Base {\n  /**\n   * Initializes a newly created key derivation function.\n   *\n   * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n   *\n   * @example\n   *\n   *     const kdf = CryptoJS.algo.EvpKDF.create();\n   *     const kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });\n   *     const kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });\n   */\n  constructor(cfg) {\n    super();\n\n    /**\n     * Configuration options.\n     *\n     * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n     * @property {Hasher} hasher The hash algorithm to use. Default: MD5\n     * @property {number} iterations The number of iterations to perform. Default: 1\n     */\n    this.cfg = Object.assign(\n      new Base(),\n      {\n        keySize: 128 / 32,\n        hasher: MD5Algo,\n        iterations: 1,\n      },\n      cfg,\n    );\n  }\n\n  /**\n   * Derives a key from a password.\n   *\n   * @param {WordArray|string} password The password.\n   * @param {WordArray|string} salt A salt.\n   *\n   * @return {WordArray} The derived key.\n   *\n   * @example\n   *\n   *     const key = kdf.compute(password, salt);\n   */\n  compute(password, salt) {\n    let block;\n\n    // Shortcut\n    const { cfg } = this;\n\n    // Init hasher\n    const hasher = cfg.hasher.create();\n\n    // Initial values\n    const derivedKey = WordArray.create();\n\n    // Shortcuts\n    const derivedKeyWords = derivedKey.words;\n    const { keySize, iterations } = cfg;\n\n    // Generate key\n    while (derivedKeyWords.length < keySize) {\n      if (block) {\n        hasher.update(block);\n      }\n      block = hasher.update(password).finalize(salt);\n      hasher.reset();\n\n      // Iterations\n      for (let i = 1; i < iterations; i += 1) {\n        block = hasher.finalize(block);\n        hasher.reset();\n      }\n\n      derivedKey.concat(block);\n    }\n    derivedKey.sigBytes = keySize * 4;\n\n    return derivedKey;\n  }\n}\n\n/**\n * Derives a key from a password.\n *\n * @param {WordArray|string} password The password.\n * @param {WordArray|string} salt A salt.\n * @param {Object} cfg (Optional) The configuration options to use for this computation.\n *\n * @return {WordArray} The derived key.\n *\n * @static\n *\n * @example\n *\n *     var key = CryptoJS.EvpKDF(password, salt);\n *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });\n *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });\n */\nexport const EvpKDF = (password, salt, cfg) => EvpKDFAlgo.create(cfg).compute(password, salt);\n","/* eslint-disable no-use-before-define */\n\nimport {\n  Base,\n  WordArray,\n  BufferedBlockAlgorithm,\n} from './core.js';\nimport { Base64 } from './enc-base64.js';\nimport { EvpKDFAlgo } from './evpkdf.js';\n\n/**\n * Abstract base cipher template.\n *\n * @property {number} keySize This cipher's key size. Default: 4 (128 bits)\n * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)\n * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.\n * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.\n */\nexport class Cipher extends BufferedBlockAlgorithm {\n  /**\n   * Initializes a newly created cipher.\n   *\n   * @param {number} xformMode Either the encryption or decryption transormation mode constant.\n   * @param {WordArray} key The key.\n   * @param {Object} cfg (Optional) The configuration options to use for this operation.\n   *\n   * @example\n   *\n   *     const cipher = CryptoJS.algo.AES.create(\n   *       CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray }\n   *     );\n   */\n  constructor(xformMode, key, cfg) {\n    super();\n\n    /**\n     * Configuration options.\n     *\n     * @property {WordArray} iv The IV to use for this operation.\n     */\n    this.cfg = Object.assign(new Base(), cfg);\n\n    // Store transform mode and key\n    this._xformMode = xformMode;\n    this._key = key;\n\n    // Set initial values\n    this.reset();\n  }\n\n  /**\n   * Creates this cipher in encryption mode.\n   *\n   * @param {WordArray} key The key.\n   * @param {Object} cfg (Optional) The configuration options to use for this operation.\n   *\n   * @return {Cipher} A cipher instance.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });\n   */\n  static createEncryptor(key, cfg) {\n    return this.create(this._ENC_XFORM_MODE, key, cfg);\n  }\n\n  /**\n   * Creates this cipher in decryption mode.\n   *\n   * @param {WordArray} key The key.\n   * @param {Object} cfg (Optional) The configuration options to use for this operation.\n   *\n   * @return {Cipher} A cipher instance.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });\n   */\n  static createDecryptor(key, cfg) {\n    return this.create(this._DEC_XFORM_MODE, key, cfg);\n  }\n\n  /**\n   * Creates shortcut functions to a cipher's object interface.\n   *\n   * @param {Cipher} cipher The cipher to create a helper for.\n   *\n   * @return {Object} An object with encrypt and decrypt shortcut functions.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);\n   */\n  static _createHelper(SubCipher) {\n    const selectCipherStrategy = (key) => {\n      if (typeof key === 'string') {\n        return PasswordBasedCipher;\n      }\n      return SerializableCipher;\n    };\n\n    return {\n      encrypt(message, key, cfg) {\n        return selectCipherStrategy(key).encrypt(SubCipher, message, key, cfg);\n      },\n\n      decrypt(ciphertext, key, cfg) {\n        return selectCipherStrategy(key).decrypt(SubCipher, ciphertext, key, cfg);\n      },\n    };\n  }\n\n  /**\n   * Resets this cipher to its initial state.\n   *\n   * @example\n   *\n   *     cipher.reset();\n   */\n  reset() {\n    // Reset data buffer\n    super.reset.call(this);\n\n    // Perform concrete-cipher logic\n    this._doReset();\n  }\n\n  /**\n   * Adds data to be encrypted or decrypted.\n   *\n   * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.\n   *\n   * @return {WordArray} The data after processing.\n   *\n   * @example\n   *\n   *     const encrypted = cipher.process('data');\n   *     const encrypted = cipher.process(wordArray);\n   */\n  process(dataUpdate) {\n    // Append\n    this._append(dataUpdate);\n\n    // Process available blocks\n    return this._process();\n  }\n\n  /**\n   * Finalizes the encryption or decryption process.\n   * Note that the finalize operation is effectively a destructive, read-once operation.\n   *\n   * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.\n   *\n   * @return {WordArray} The data after final processing.\n   *\n   * @example\n   *\n   *     const encrypted = cipher.finalize();\n   *     const encrypted = cipher.finalize('data');\n   *     const encrypted = cipher.finalize(wordArray);\n   */\n  finalize(dataUpdate) {\n    // Final data update\n    if (dataUpdate) {\n      this._append(dataUpdate);\n    }\n\n    // Perform concrete-cipher logic\n    const finalProcessedData = this._doFinalize();\n\n    return finalProcessedData;\n  }\n}\nCipher._ENC_XFORM_MODE = 1;\nCipher._DEC_XFORM_MODE = 2;\nCipher.keySize = 128 / 32;\nCipher.ivSize = 128 / 32;\n\n/**\n * Abstract base stream cipher template.\n *\n * @property {number} blockSize\n *\n *     The number of 32-bit words this cipher operates on. Default: 1 (32 bits)\n */\nexport class StreamCipher extends Cipher {\n  constructor(...args) {\n    super(...args);\n\n    this.blockSize = 1;\n  }\n\n  _doFinalize() {\n    // Process partial blocks\n    const finalProcessedBlocks = this._process(!!'flush');\n\n    return finalProcessedBlocks;\n  }\n}\n\n/**\n * Abstract base block cipher mode template.\n */\nexport class BlockCipherMode extends Base {\n  /**\n   * Initializes a newly created mode.\n   *\n   * @param {Cipher} cipher A block cipher instance.\n   * @param {Array} iv The IV words.\n   *\n   * @example\n   *\n   *     const mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);\n   */\n  constructor(cipher, iv) {\n    super();\n\n    this._cipher = cipher;\n    this._iv = iv;\n  }\n\n  /**\n   * Creates this mode for encryption.\n   *\n   * @param {Cipher} cipher A block cipher instance.\n   * @param {Array} iv The IV words.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);\n   */\n  static createEncryptor(cipher, iv) {\n    return this.Encryptor.create(cipher, iv);\n  }\n\n  /**\n   * Creates this mode for decryption.\n   *\n   * @param {Cipher} cipher A block cipher instance.\n   * @param {Array} iv The IV words.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);\n   */\n  static createDecryptor(cipher, iv) {\n    return this.Decryptor.create(cipher, iv);\n  }\n}\n\nfunction xorBlock(words, offset, blockSize) {\n  const _words = words;\n  let block;\n\n  // Shortcut\n  const iv = this._iv;\n\n  // Choose mixing block\n  if (iv) {\n    block = iv;\n\n    // Remove IV for subsequent blocks\n    this._iv = undefined;\n  } else {\n    block = this._prevBlock;\n  }\n\n  // XOR blocks\n  for (let i = 0; i < blockSize; i += 1) {\n    _words[offset + i] ^= block[i];\n  }\n}\n\n/**\n * Cipher Block Chaining mode.\n */\n\n/**\n * Abstract base CBC mode.\n */\nexport class CBC extends BlockCipherMode {\n}\n/**\n * CBC encryptor.\n */\nCBC.Encryptor = class extends CBC {\n  /**\n   * Processes the data block at offset.\n   *\n   * @param {Array} words The data words to operate on.\n   * @param {number} offset The offset where the block starts.\n   *\n   * @example\n   *\n   *     mode.processBlock(data.words, offset);\n   */\n  processBlock(words, offset) {\n    // Shortcuts\n    const cipher = this._cipher;\n    const { blockSize } = cipher;\n\n    // XOR and encrypt\n    xorBlock.call(this, words, offset, blockSize);\n    cipher.encryptBlock(words, offset);\n\n    // Remember this block to use with next block\n    this._prevBlock = words.slice(offset, offset + blockSize);\n  }\n};\n/**\n * CBC decryptor.\n */\nCBC.Decryptor = class extends CBC {\n  /**\n   * Processes the data block at offset.\n   *\n   * @param {Array} words The data words to operate on.\n   * @param {number} offset The offset where the block starts.\n   *\n   * @example\n   *\n   *     mode.processBlock(data.words, offset);\n   */\n  processBlock(words, offset) {\n    // Shortcuts\n    const cipher = this._cipher;\n    const { blockSize } = cipher;\n\n    // Remember this block to use with next block\n    const thisBlock = words.slice(offset, offset + blockSize);\n\n    // Decrypt and XOR\n    cipher.decryptBlock(words, offset);\n    xorBlock.call(this, words, offset, blockSize);\n\n    // This block becomes the previous block\n    this._prevBlock = thisBlock;\n  }\n};\n\n/**\n * PKCS #5/7 padding strategy.\n */\nexport const Pkcs7 = {\n  /**\n   * Pads data using the algorithm defined in PKCS #5/7.\n   *\n   * @param {WordArray} data The data to pad.\n   * @param {number} blockSize The multiple that the data should be padded to.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);\n   */\n  pad(data, blockSize) {\n    // Shortcut\n    const blockSizeBytes = blockSize * 4;\n\n    // Count padding bytes\n    const nPaddingBytes = blockSizeBytes - (data.sigBytes % blockSizeBytes);\n\n    // Create padding word\n    const paddingWord = (nPaddingBytes << 24)\n      | (nPaddingBytes << 16)\n      | (nPaddingBytes << 8)\n      | nPaddingBytes;\n\n    // Create padding\n    const paddingWords = [];\n    for (let i = 0; i < nPaddingBytes; i += 4) {\n      paddingWords.push(paddingWord);\n    }\n    const padding = WordArray.create(paddingWords, nPaddingBytes);\n\n    // Add padding\n    data.concat(padding);\n  },\n\n  /**\n   * Unpads data that had been padded using the algorithm defined in PKCS #5/7.\n   *\n   * @param {WordArray} data The data to unpad.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     CryptoJS.pad.Pkcs7.unpad(wordArray);\n   */\n  unpad(data) {\n    const _data = data;\n\n    // Get number of padding bytes from last byte\n    const nPaddingBytes = _data.words[(_data.sigBytes - 1) >>> 2] & 0xff;\n\n    // Remove padding\n    _data.sigBytes -= nPaddingBytes;\n  },\n};\n\n/**\n * Abstract base block cipher template.\n *\n * @property {number} blockSize\n *\n *    The number of 32-bit words this cipher operates on. Default: 4 (128 bits)\n */\nexport class BlockCipher extends Cipher {\n  constructor(xformMode, key, cfg) {\n    /**\n     * Configuration options.\n     *\n     * @property {Mode} mode The block mode to use. Default: CBC\n     * @property {Padding} padding The padding strategy to use. Default: Pkcs7\n     */\n    super(xformMode, key, Object.assign(\n      {\n        mode: CBC,\n        padding: Pkcs7,\n      },\n      cfg,\n    ));\n\n    this.blockSize = 128 / 32;\n  }\n\n  reset() {\n    let modeCreator;\n\n    // Reset cipher\n    super.reset.call(this);\n\n    // Shortcuts\n    const { cfg } = this;\n    const { iv, mode } = cfg;\n\n    // Reset block mode\n    if (this._xformMode === this.constructor._ENC_XFORM_MODE) {\n      modeCreator = mode.createEncryptor;\n    } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\n      modeCreator = mode.createDecryptor;\n      // Keep at least one block in the buffer for unpadding\n      this._minBufferSize = 1;\n    }\n\n    this._mode = modeCreator.call(mode, this, iv && iv.words);\n    this._mode.__creator = modeCreator;\n  }\n\n  _doProcessBlock(words, offset) {\n    this._mode.processBlock(words, offset);\n  }\n\n  _doFinalize() {\n    let finalProcessedBlocks;\n\n    // Shortcut\n    const { padding } = this.cfg;\n\n    // Finalize\n    if (this._xformMode === this.constructor._ENC_XFORM_MODE) {\n      // Pad data\n      padding.pad(this._data, this.blockSize);\n\n      // Process final blocks\n      finalProcessedBlocks = this._process(!!'flush');\n    } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\n      // Process final blocks\n      finalProcessedBlocks = this._process(!!'flush');\n\n      // Unpad data\n      padding.unpad(finalProcessedBlocks);\n    }\n\n    return finalProcessedBlocks;\n  }\n}\n\n/**\n * A collection of cipher parameters.\n *\n * @property {WordArray} ciphertext The raw ciphertext.\n * @property {WordArray} key The key to this ciphertext.\n * @property {WordArray} iv The IV used in the ciphering operation.\n * @property {WordArray} salt The salt used with a key derivation function.\n * @property {Cipher} algorithm The cipher algorithm.\n * @property {Mode} mode The block mode used in the ciphering operation.\n * @property {Padding} padding The padding scheme used in the ciphering operation.\n * @property {number} blockSize The block size of the cipher.\n * @property {Format} formatter\n *    The default formatting strategy to convert this cipher params object to a string.\n */\nexport class CipherParams extends Base {\n  /**\n   * Initializes a newly created cipher params object.\n   *\n   * @param {Object} cipherParams An object with any of the possible cipher parameters.\n   *\n   * @example\n   *\n   *     var cipherParams = CryptoJS.lib.CipherParams.create({\n   *         ciphertext: ciphertextWordArray,\n   *         key: keyWordArray,\n   *         iv: ivWordArray,\n   *         salt: saltWordArray,\n   *         algorithm: CryptoJS.algo.AES,\n   *         mode: CryptoJS.mode.CBC,\n   *         padding: CryptoJS.pad.PKCS7,\n   *         blockSize: 4,\n   *         formatter: CryptoJS.format.OpenSSL\n   *     });\n   */\n  constructor(cipherParams) {\n    super();\n\n    this.mixIn(cipherParams);\n  }\n\n  /**\n   * Converts this cipher params object to a string.\n   *\n   * @param {Format} formatter (Optional) The formatting strategy to use.\n   *\n   * @return {string} The stringified cipher params.\n   *\n   * @throws Error If neither the formatter nor the default formatter is set.\n   *\n   * @example\n   *\n   *     var string = cipherParams + '';\n   *     var string = cipherParams.toString();\n   *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);\n   */\n  toString(formatter) {\n    return (formatter || this.formatter).stringify(this);\n  }\n}\n\n/**\n * OpenSSL formatting strategy.\n */\nexport const OpenSSLFormatter = {\n  /**\n   * Converts a cipher params object to an OpenSSL-compatible string.\n   *\n   * @param {CipherParams} cipherParams The cipher params object.\n   *\n   * @return {string} The OpenSSL-compatible string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);\n   */\n  stringify(cipherParams) {\n    let wordArray;\n\n    // Shortcuts\n    const { ciphertext, salt } = cipherParams;\n\n    // Format\n    if (salt) {\n      wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);\n    } else {\n      wordArray = ciphertext;\n    }\n\n    return wordArray.toString(Base64);\n  },\n\n  /**\n   * Converts an OpenSSL-compatible string to a cipher params object.\n   *\n   * @param {string} openSSLStr The OpenSSL-compatible string.\n   *\n   * @return {CipherParams} The cipher params object.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);\n   */\n  parse(openSSLStr) {\n    let salt;\n\n    // Parse base64\n    const ciphertext = Base64.parse(openSSLStr);\n\n    // Shortcut\n    const ciphertextWords = ciphertext.words;\n\n    // Test for salt\n    if (ciphertextWords[0] === 0x53616c74 && ciphertextWords[1] === 0x65645f5f) {\n      // Extract salt\n      salt = WordArray.create(ciphertextWords.slice(2, 4));\n\n      // Remove salt from ciphertext\n      ciphertextWords.splice(0, 4);\n      ciphertext.sigBytes -= 16;\n    }\n\n    return CipherParams.create({ ciphertext, salt });\n  },\n};\n\n/**\n * A cipher wrapper that returns ciphertext as a serializable cipher params object.\n */\nexport class SerializableCipher extends Base {\n  /**\n   * Encrypts a message.\n   *\n   * @param {Cipher} cipher The cipher algorithm to use.\n   * @param {WordArray|string} message The message to encrypt.\n   * @param {WordArray} key The key.\n   * @param {Object} cfg (Optional) The configuration options to use for this operation.\n   *\n   * @return {CipherParams} A cipher params object.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var ciphertextParams = CryptoJS.lib.SerializableCipher\n   *       .encrypt(CryptoJS.algo.AES, message, key);\n   *     var ciphertextParams = CryptoJS.lib.SerializableCipher\n   *       .encrypt(CryptoJS.algo.AES, message, key, { iv: iv });\n   *     var ciphertextParams = CryptoJS.lib.SerializableCipher\n   *       .encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n   */\n  static encrypt(cipher, message, key, cfg) {\n    // Apply config defaults\n    const _cfg = Object.assign(new Base(), this.cfg, cfg);\n\n    // Encrypt\n    const encryptor = cipher.createEncryptor(key, _cfg);\n    const ciphertext = encryptor.finalize(message);\n\n    // Shortcut\n    const cipherCfg = encryptor.cfg;\n\n    // Create and return serializable cipher params\n    return CipherParams.create({\n      ciphertext,\n      key,\n      iv: cipherCfg.iv,\n      algorithm: cipher,\n      mode: cipherCfg.mode,\n      padding: cipherCfg.padding,\n      blockSize: encryptor.blockSize,\n      formatter: _cfg.format,\n    });\n  }\n\n  /**\n   * Decrypts serialized ciphertext.\n   *\n   * @param {Cipher} cipher The cipher algorithm to use.\n   * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n   * @param {WordArray} key The key.\n   * @param {Object} cfg (Optional) The configuration options to use for this operation.\n   *\n   * @return {WordArray} The plaintext.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var plaintext = CryptoJS.lib.SerializableCipher\n   *       .decrypt(CryptoJS.algo.AES, formattedCiphertext, key,\n   *         { iv: iv, format: CryptoJS.format.OpenSSL });\n   *     var plaintext = CryptoJS.lib.SerializableCipher\n   *       .decrypt(CryptoJS.algo.AES, ciphertextParams, key,\n   *         { iv: iv, format: CryptoJS.format.OpenSSL });\n   */\n  static decrypt(cipher, ciphertext, key, cfg) {\n    let _ciphertext = ciphertext;\n\n    // Apply config defaults\n    const _cfg = Object.assign(new Base(), this.cfg, cfg);\n\n    // Convert string to CipherParams\n    _ciphertext = this._parse(_ciphertext, _cfg.format);\n\n    // Decrypt\n    const plaintext = cipher.createDecryptor(key, _cfg).finalize(_ciphertext.ciphertext);\n\n    return plaintext;\n  }\n\n  /**\n   * Converts serialized ciphertext to CipherParams,\n   * else assumed CipherParams already and returns ciphertext unchanged.\n   *\n   * @param {CipherParams|string} ciphertext The ciphertext.\n   * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.\n   *\n   * @return {CipherParams} The unserialized ciphertext.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var ciphertextParams = CryptoJS.lib.SerializableCipher\n   *       ._parse(ciphertextStringOrParams, format);\n   */\n  static _parse(ciphertext, format) {\n    if (typeof ciphertext === 'string') {\n      return format.parse(ciphertext, this);\n    }\n    return ciphertext;\n  }\n}\n/**\n * Configuration options.\n *\n * @property {Formatter} format\n *\n *    The formatting strategy to convert cipher param objects to and from a string.\n *    Default: OpenSSL\n */\nSerializableCipher.cfg = Object.assign(\n  new Base(),\n  { format: OpenSSLFormatter },\n);\n\n/**\n * OpenSSL key derivation function.\n */\nexport const OpenSSLKdf = {\n  /**\n   * Derives a key and IV from a password.\n   *\n   * @param {string} password The password to derive from.\n   * @param {number} keySize The size in words of the key to generate.\n   * @param {number} ivSize The size in words of the IV to generate.\n   * @param {WordArray|string} salt\n   *     (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.\n   *\n   * @return {CipherParams} A cipher params object with the key, IV, and salt.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);\n   *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');\n   */\n  execute(password, keySize, ivSize, salt) {\n    let _salt = salt;\n\n    // Generate random salt\n    if (!_salt) {\n      _salt = WordArray.random(64 / 8);\n    }\n\n    // Derive key and IV\n    const key = EvpKDFAlgo.create({ keySize: keySize + ivSize }).compute(password, _salt);\n\n    // Separate key and IV\n    const iv = WordArray.create(key.words.slice(keySize), ivSize * 4);\n    key.sigBytes = keySize * 4;\n\n    // Return params\n    return CipherParams.create({ key, iv, salt: _salt });\n  },\n};\n\n/**\n * A serializable cipher wrapper that derives the key from a password,\n * and returns ciphertext as a serializable cipher params object.\n */\nexport class PasswordBasedCipher extends SerializableCipher {\n  /**\n   * Encrypts a message using a password.\n   *\n   * @param {Cipher} cipher The cipher algorithm to use.\n   * @param {WordArray|string} message The message to encrypt.\n   * @param {string} password The password.\n   * @param {Object} cfg (Optional) The configuration options to use for this operation.\n   *\n   * @return {CipherParams} A cipher params object.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher\n   *       .encrypt(CryptoJS.algo.AES, message, 'password');\n   *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher\n   *       .encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });\n   */\n  static encrypt(cipher, message, password, cfg) {\n    // Apply config defaults\n    const _cfg = Object.assign(new Base(), this.cfg, cfg);\n\n    // Derive key and other params\n    const derivedParams = _cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);\n\n    // Add IV to config\n    _cfg.iv = derivedParams.iv;\n\n    // Encrypt\n    const ciphertext = SerializableCipher.encrypt\n      .call(this, cipher, message, derivedParams.key, _cfg);\n\n    // Mix in derived params\n    ciphertext.mixIn(derivedParams);\n\n    return ciphertext;\n  }\n\n  /**\n   * Decrypts serialized ciphertext using a password.\n   *\n   * @param {Cipher} cipher The cipher algorithm to use.\n   * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n   * @param {string} password The password.\n   * @param {Object} cfg (Optional) The configuration options to use for this operation.\n   *\n   * @return {WordArray} The plaintext.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var plaintext = CryptoJS.lib.PasswordBasedCipher\n   *       .decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password',\n   *         { format: CryptoJS.format.OpenSSL });\n   *     var plaintext = CryptoJS.lib.PasswordBasedCipher\n   *       .decrypt(CryptoJS.algo.AES, ciphertextParams, 'password',\n   *         { format: CryptoJS.format.OpenSSL });\n   */\n  static decrypt(cipher, ciphertext, password, cfg) {\n    let _ciphertext = ciphertext;\n\n    // Apply config defaults\n    const _cfg = Object.assign(new Base(), this.cfg, cfg);\n\n    // Convert string to CipherParams\n    _ciphertext = this._parse(_ciphertext, _cfg.format);\n\n    // Derive key and other params\n    const derivedParams = _cfg.kdf\n      .execute(password, cipher.keySize, cipher.ivSize, _ciphertext.salt);\n\n    // Add IV to config\n    _cfg.iv = derivedParams.iv;\n\n    // Decrypt\n    const plaintext = SerializableCipher.decrypt\n      .call(this, cipher, _ciphertext, derivedParams.key, _cfg);\n\n    return plaintext;\n  }\n}\n/**\n * Configuration options.\n *\n * @property {KDF} kdf\n *     The key derivation function to use to generate a key and IV from a password.\n *     Default: OpenSSL\n */\nPasswordBasedCipher.cfg = Object.assign(SerializableCipher.cfg, { kdf: OpenSSLKdf });\n","import {\n  BlockCipher,\n} from './cipher-core.js';\n\n// Lookup tables\nconst _SBOX = [];\nconst INV_SBOX = [];\nconst _SUB_MIX_0 = [];\nconst _SUB_MIX_1 = [];\nconst _SUB_MIX_2 = [];\nconst _SUB_MIX_3 = [];\nconst INV_SUB_MIX_0 = [];\nconst INV_SUB_MIX_1 = [];\nconst INV_SUB_MIX_2 = [];\nconst INV_SUB_MIX_3 = [];\n\n// Compute lookup tables\n\n// Compute double table\nconst d = [];\nfor (let i = 0; i < 256; i += 1) {\n  if (i < 128) {\n    d[i] = i << 1;\n  } else {\n    d[i] = (i << 1) ^ 0x11b;\n  }\n}\n\n// Walk GF(2^8)\nlet x = 0;\nlet xi = 0;\nfor (let i = 0; i < 256; i += 1) {\n  // Compute sbox\n  let sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);\n  sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;\n  _SBOX[x] = sx;\n  INV_SBOX[sx] = x;\n\n  // Compute multiplication\n  const x2 = d[x];\n  const x4 = d[x2];\n  const x8 = d[x4];\n\n  // Compute sub bytes, mix columns tables\n  let t = (d[sx] * 0x101) ^ (sx * 0x1010100);\n  _SUB_MIX_0[x] = (t << 24) | (t >>> 8);\n  _SUB_MIX_1[x] = (t << 16) | (t >>> 16);\n  _SUB_MIX_2[x] = (t << 8) | (t >>> 24);\n  _SUB_MIX_3[x] = t;\n\n  // Compute inv sub bytes, inv mix columns tables\n  t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);\n  INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);\n  INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);\n  INV_SUB_MIX_2[sx] = (t << 8) | (t >>> 24);\n  INV_SUB_MIX_3[sx] = t;\n\n  // Compute next counter\n  if (!x) {\n    xi = 1;\n    x = xi;\n  } else {\n    x = x2 ^ d[d[d[x8 ^ x2]]];\n    xi ^= d[d[xi]];\n  }\n}\n\n// Precomputed Rcon lookup\nconst RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];\n\n/**\n * AES block cipher algorithm.\n */\nexport class AESAlgo extends BlockCipher {\n  _doReset() {\n    let t;\n\n    // Skip reset of nRounds has been set before and key did not change\n    if (this._nRounds && this._keyPriorReset === this._key) {\n      return;\n    }\n\n    // Shortcuts\n    this._keyPriorReset = this._key;\n    const key = this._keyPriorReset;\n    const keyWords = key.words;\n    const keySize = key.sigBytes / 4;\n\n    // Compute number of rounds\n    this._nRounds = keySize + 6;\n    const nRounds = this._nRounds;\n\n    // Compute number of key schedule rows\n    const ksRows = (nRounds + 1) * 4;\n\n    // Compute key schedule\n    this._keySchedule = [];\n    const keySchedule = this._keySchedule;\n    for (let ksRow = 0; ksRow < ksRows; ksRow += 1) {\n      if (ksRow < keySize) {\n        keySchedule[ksRow] = keyWords[ksRow];\n      } else {\n        t = keySchedule[ksRow - 1];\n\n        if (!(ksRow % keySize)) {\n          // Rot word\n          t = (t << 8) | (t >>> 24);\n\n          // Sub word\n          t = (_SBOX[t >>> 24] << 24)\n            | (_SBOX[(t >>> 16) & 0xff] << 16)\n            | (_SBOX[(t >>> 8) & 0xff] << 8)\n            | _SBOX[t & 0xff];\n\n          // Mix Rcon\n          t ^= RCON[(ksRow / keySize) | 0] << 24;\n        } else if (keySize > 6 && ksRow % keySize === 4) {\n          // Sub word\n          t = (_SBOX[t >>> 24] << 24)\n            | (_SBOX[(t >>> 16) & 0xff] << 16)\n            | (_SBOX[(t >>> 8) & 0xff] << 8)\n            | _SBOX[t & 0xff];\n        }\n\n        keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;\n      }\n    }\n\n    // Compute inv key schedule\n    this._invKeySchedule = [];\n    const invKeySchedule = this._invKeySchedule;\n    for (let invKsRow = 0; invKsRow < ksRows; invKsRow += 1) {\n      const ksRow = ksRows - invKsRow;\n\n      if (invKsRow % 4) {\n        t = keySchedule[ksRow];\n      } else {\n        t = keySchedule[ksRow - 4];\n      }\n\n      if (invKsRow < 4 || ksRow <= 4) {\n        invKeySchedule[invKsRow] = t;\n      } else {\n        invKeySchedule[invKsRow] = INV_SUB_MIX_0[_SBOX[t >>> 24]]\n          ^ INV_SUB_MIX_1[_SBOX[(t >>> 16) & 0xff]]\n          ^ INV_SUB_MIX_2[_SBOX[(t >>> 8) & 0xff]]\n          ^ INV_SUB_MIX_3[_SBOX[t & 0xff]];\n      }\n    }\n  }\n\n  encryptBlock(M, offset) {\n    this._doCryptBlock(\n      M, offset, this._keySchedule, _SUB_MIX_0, _SUB_MIX_1, _SUB_MIX_2, _SUB_MIX_3, _SBOX,\n    );\n  }\n\n  decryptBlock(M, offset) {\n    const _M = M;\n\n    // Swap 2nd and 4th rows\n    let t = _M[offset + 1];\n    _M[offset + 1] = _M[offset + 3];\n    _M[offset + 3] = t;\n\n    this._doCryptBlock(\n      _M,\n      offset,\n      this._invKeySchedule,\n      INV_SUB_MIX_0,\n      INV_SUB_MIX_1,\n      INV_SUB_MIX_2,\n      INV_SUB_MIX_3,\n      INV_SBOX,\n    );\n\n    // Inv swap 2nd and 4th rows\n    t = _M[offset + 1];\n    _M[offset + 1] = _M[offset + 3];\n    _M[offset + 3] = t;\n  }\n\n  _doCryptBlock(M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {\n    const _M = M;\n\n    // Shortcut\n    const nRounds = this._nRounds;\n\n    // Get input, add round key\n    let s0 = _M[offset] ^ keySchedule[0];\n    let s1 = _M[offset + 1] ^ keySchedule[1];\n    let s2 = _M[offset + 2] ^ keySchedule[2];\n    let s3 = _M[offset + 3] ^ keySchedule[3];\n\n    // Key schedule row counter\n    let ksRow = 4;\n\n    // Rounds\n    for (let round = 1; round < nRounds; round += 1) {\n      // Shift rows, sub bytes, mix columns, add round key\n      const t0 = SUB_MIX_0[s0 >>> 24]\n        ^ SUB_MIX_1[(s1 >>> 16) & 0xff]\n        ^ SUB_MIX_2[(s2 >>> 8) & 0xff]\n        ^ SUB_MIX_3[s3 & 0xff]\n        ^ keySchedule[ksRow];\n      ksRow += 1;\n      const t1 = SUB_MIX_0[s1 >>> 24]\n        ^ SUB_MIX_1[(s2 >>> 16) & 0xff]\n        ^ SUB_MIX_2[(s3 >>> 8) & 0xff]\n        ^ SUB_MIX_3[s0 & 0xff]\n        ^ keySchedule[ksRow];\n      ksRow += 1;\n      const t2 = SUB_MIX_0[s2 >>> 24]\n        ^ SUB_MIX_1[(s3 >>> 16) & 0xff]\n        ^ SUB_MIX_2[(s0 >>> 8) & 0xff]\n        ^ SUB_MIX_3[s1 & 0xff]\n        ^ keySchedule[ksRow];\n      ksRow += 1;\n      const t3 = SUB_MIX_0[s3 >>> 24]\n        ^ SUB_MIX_1[(s0 >>> 16) & 0xff]\n        ^ SUB_MIX_2[(s1 >>> 8) & 0xff]\n        ^ SUB_MIX_3[s2 & 0xff]\n        ^ keySchedule[ksRow];\n      ksRow += 1;\n\n      // Update state\n      s0 = t0;\n      s1 = t1;\n      s2 = t2;\n      s3 = t3;\n    }\n\n    // Shift rows, sub bytes, add round key\n    const t0 = (\n      (SBOX[s0 >>> 24] << 24)\n        | (SBOX[(s1 >>> 16) & 0xff] << 16)\n        | (SBOX[(s2 >>> 8) & 0xff] << 8)\n        | SBOX[s3 & 0xff]\n    ) ^ keySchedule[ksRow];\n    ksRow += 1;\n    const t1 = (\n      (SBOX[s1 >>> 24] << 24)\n        | (SBOX[(s2 >>> 16) & 0xff] << 16)\n        | (SBOX[(s3 >>> 8) & 0xff] << 8)\n        | SBOX[s0 & 0xff]\n    ) ^ keySchedule[ksRow];\n    ksRow += 1;\n    const t2 = (\n      (SBOX[s2 >>> 24] << 24)\n        | (SBOX[(s3 >>> 16) & 0xff] << 16)\n        | (SBOX[(s0 >>> 8) & 0xff] << 8)\n        | SBOX[s1 & 0xff]\n    ) ^ keySchedule[ksRow];\n    ksRow += 1;\n    const t3 = (\n      (SBOX[s3 >>> 24] << 24)\n        | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]\n    ) ^ keySchedule[ksRow];\n    ksRow += 1;\n\n    // Set output\n    _M[offset] = t0;\n    _M[offset + 1] = t1;\n    _M[offset + 2] = t2;\n    _M[offset + 3] = t3;\n  }\n}\nAESAlgo.keySize = 256 / 32;\n\n/**\n * Shortcut functions to the cipher's object interface.\n *\n * @example\n *\n *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);\n *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);\n */\nexport const AES = BlockCipher._createHelper(AESAlgo);\n","// ----------------------------------------------------------------\r\n// Variant 1 // Only necessary modules\r\n\r\nimport {WordArray, Hex} from \"crypto-es/lib/core.js\";\r\nimport {AES} from \"crypto-es/lib/aes.js\";\r\nimport {CBC} from \"crypto-es/lib/cipher-core.js\";\r\nimport {NoPadding}   from \"crypto-es/lib/pad-nopadding.js\";\r\nimport {ZeroPadding} from \"crypto-es/lib/pad-zeropadding.js\";\r\n\r\nconst CryptoES = {\r\n    /** @type CipherObj */\r\n    AES,\r\n    lib: {\r\n        WordArray\r\n    },\r\n    mode: {\r\n        CBC\r\n    },\r\n    pad: {\r\n        NoPadding,\r\n        ZeroPadding\r\n    },\r\n    enc: {\r\n        Hex\r\n    },\r\n};\r\nexport default CryptoES;\r\n\r\n// ----------------------------------------------------------------\r\n// Variant 2 // use `import * as ${name}`\r\n\r\n// /** @type CipherObj */\r\n// export {AES};\r\n// export const lib  = {WordArray};\r\n// export const mode = {CBC};\r\n// export const pad  = {NoPadding, ZeroPadding};\r\n// export const enc  = {Hex};\r\n\r\n\r\n// ----------------------------------------------------------------\r\n// Variant 3 // All modules // (tree shaking does not work with objects/classes):\r\n\r\n// export CryptoES from \"crypto-es\";\r\n\r\n\r\n\r\n","/**\n * A noop padding strategy.\n */\nexport const NoPadding = {\n  pad() {\n  },\n\n  unpad() {\n  },\n};\n","/**\n * Zero padding strategy.\n */\nexport const ZeroPadding = {\n  pad(data, blockSize) {\n    const _data = data;\n\n    // Shortcut\n    const blockSizeBytes = blockSize * 4;\n\n    // Pad\n    _data.clamp();\n    _data.sigBytes += blockSizeBytes - ((data.sigBytes % blockSizeBytes) || blockSizeBytes);\n  },\n\n  unpad(data) {\n    const _data = data;\n\n    // Shortcut\n    const dataWords = _data.words;\n\n    // Unpad\n    for (let i = _data.sigBytes - 1; i >= 0; i -= 1) {\n      if (((dataWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff)) {\n        _data.sigBytes = i + 1;\n        break;\n      }\n    }\n  },\n};\n","import {atob, btoa, MessageChannel} from \"./browser-context.js\";\r\n\r\nexport default class Util {\r\n\r\n    /**\r\n     * @param {string} base64\r\n     * @returns {string} binaryString\r\n     */\r\n    static base64ToBinaryString(base64) {\r\n        try {\r\n            return atob(base64);\r\n        } catch (e) {\r\n            console.error(\"Incorrect Base64:\", base64);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {string} binaryString\r\n     * @returns {string} base64\r\n     */\r\n    static binaryStringToBase64(binaryString) {\r\n        return btoa(binaryString);\r\n    }\r\n\r\n    /**\r\n     * @param {TypedArray|ArrayBuffer|DataView} arrayBuffer\r\n     * @returns {string}\r\n     */\r\n    static arrayBufferToUtf8String(arrayBuffer) {\r\n        return new TextDecoder().decode(arrayBuffer);\r\n    }\r\n\r\n    /**\r\n     * To binary string (Latin1).\r\n     *\r\n     * NB: A binary string is a string is encoded with \"Latin1\" (\"ISO-8859-1\", not \"Windows−1252\"!).\r\n     * `TextDecoder` does not support decoding \"Latin1\", \"ISO-8859-1\".\r\n     * ```\r\n     * const str = new TextDecoder(\"ISO-8859-1\").decode(new Uint8Array([148, 125, 1, 218, 233, 169, 248, 111]));\r\n     * console.log(str[0], str[0].charCodeAt(0)); // \"”\" 8221 (!)\r\n     * const result = Uint8Array.from(str.split(\"\"), ch => ch.charCodeAt(0));\r\n     * console.log(result);\r\n     * // [29, 125, 1, 218, 233, 169, 248, 111] // 29 (!) (trims `8221` to one byte)\r\n     * ```\r\n     * UPD:\r\n     * Well, it works not so good as I expected\r\n     * ```\r\n     * String.fromCharCode(...new Uint8Array(125830)) // OK\r\n     * String.fromCharCode(...new Uint8Array(125831)) // RangeError: Maximum call stack size exceeded\r\n     * ```\r\n     * Replaced with `reduce`. It works OK, no need to optimise (like `Util.arrayBufferToHexString()`).\r\n     *\r\n     * Also:\r\n     * new TextDecoder(\"utf-8\").decode(new Uint8Array([128])).charCodeAt(0) === 65533 \"�\"\r\n     * new TextDecoder(\"Latin1\").decode(new Uint8Array([128])).charCodeAt(0) === 8364 \"€\"\r\n     * String.fromCharCode(128).charCodeAt(0) === 128 \"\"\r\n     *\r\n     * @param {Uint8Array} arrayBuffer\r\n     * @returns {string} binaryString\r\n     * */\r\n    static arrayBufferToBinaryString(arrayBuffer) {\r\n        return arrayBuffer.reduce((accumulator, byte) => accumulator + String.fromCharCode(byte), \"\");\r\n    }\r\n\r\n    /**\r\n     * Do not use `new TextEncoder().encode(binaryStr)` for binary (Latin1) strings.\r\n     * It maps code points to utf8 bytes (so char codes of 128-255 range maps to 2 bytes, not 1).\r\n     * For example: String.fromCharCode(128) is mapped to [194, 128] bytes\r\n     *\r\n     * The current implementation works x2-4 times faster than:\r\n     * `Uint8Array.from(binaryString.split(\"\"), ch => ch.charCodeAt(0))`\r\n     *\r\n     * @param {string} binaryString\r\n     * @returns {Uint8Array} u8Array\r\n     */\r\n    static binaryStringToArrayBuffer(binaryString) {\r\n        const u8Array = new Uint8Array(binaryString.length);\r\n        for (let i = 0; i < binaryString.length; i++) {\r\n            u8Array[i] = binaryString.charCodeAt(i);\r\n        }\r\n        return u8Array;\r\n    }\r\n\r\n    /**\r\n     * Binary string (Latin1) encoded with Base64 to ArrayBuffer\r\n     * @param {string} base64\r\n     * @returns {Uint8Array}\r\n     */\r\n    static base64ToArrayBuffer(base64) {\r\n        const binaryString = Util.base64ToBinaryString(base64);\r\n        return Util.binaryStringToArrayBuffer(binaryString);\r\n    }\r\n\r\n    /**\r\n     * ArrayBuffer to Base64 encoded binary string (Latin1)\r\n     * @param {Uint8Array} arrayBuffer\r\n     * @returns {string}\r\n     */\r\n    static arrayBufferToBase64(arrayBuffer) {\r\n        const binaryString = Util.arrayBufferToBinaryString(arrayBuffer);\r\n        return Util.binaryStringToBase64(binaryString);\r\n    }\r\n\r\n    /**\r\n     * The optimised version\r\n     * @param {TypedArray} arrayBuffer\r\n     * @returns {string}\r\n     */\r\n    static arrayBufferToHexString(arrayBuffer) {\r\n        const byteToHex = Util.ByteToHexTable.get();\r\n\r\n        const buffer = new Uint8Array(arrayBuffer.buffer);\r\n        const hexOctets = new Array(buffer.length);\r\n\r\n        for (let i = 0; i < buffer.length; i++) {\r\n            hexOctets[i] = byteToHex[buffer[i]];\r\n        }\r\n\r\n        return hexOctets.join(\"\");\r\n    }\r\n\r\n    /**\r\n     * Allows to get the precomputed hex octets table (the array)\r\n     *\r\n     * `[0]: \"00\"`\r\n     * ...\r\n     * `[255]: \"FF\"`\r\n     *\r\n     * It is used only in `Util.arrayBufferToHexString()`. Lazy loading.\r\n     * @private\r\n     */\r\n    static ByteToHexTable = class {\r\n        static get() {\r\n            const self = Util.ByteToHexTable;\r\n            if (!self.inited) {\r\n                self.init();\r\n            }\r\n            return self.byteToHex;\r\n        }\r\n        static byteToHex = [];\r\n        static inited = false;\r\n        static init = () => {\r\n            const self = Util.ByteToHexTable;\r\n            for (let i = 0; i < 256; i++) {\r\n                const hexOctet = i.toString(16).padStart(2, \"0\");\r\n                self.byteToHex.push(hexOctet);\r\n            }\r\n            self.inited = true;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Array of bytes (Little-endian) to Long (64-bits) value\r\n     * @param {Uint8Array} arrayBuffer\r\n     * @returns {number}\r\n     */\r\n    static arrayBufferToLong(arrayBuffer) {\r\n        const sizeofLong = 8; // in fact max integer value in JS has 7 bytes, see Number.MAX_SAFE_INTEGER\r\n\r\n        if (arrayBuffer.length > sizeofLong) {\r\n            throw \"Length is over size of Long\";\r\n        }\r\n\r\n        const result = arrayBuffer.reduce((previousValue, currentValue, index) => {\r\n            return previousValue + currentValue * (256 ** index);\r\n        }, 0);\r\n\r\n        if (result > Number.MAX_SAFE_INTEGER) { // > 9007199254740991 === 00 1F FF FF  FF FF FF FF\r\n            throw \"Over Number.MAX_SAFE_INTEGER\";\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 1436853891 -> \"2015.07.14 09:04:51\"\r\n     * @param {number} seconds\r\n     * @returns {string}\r\n     */\r\n    static secondsToFormattedString(seconds) {\r\n        const date = new Date(seconds * 1000);\r\n\r\n        // Adds zero padding\r\n        function pad(str) {\r\n            return str.toString().padStart(2, \"0\");\r\n        }\r\n\r\n        return date.getFullYear() + \".\" + pad(date.getMonth() + 1) + \".\" + pad(date.getDate()) + \" \" +\r\n            pad(date.getHours()) + \":\" + pad(date.getMinutes()) + \":\" + pad(date.getSeconds());\r\n    }\r\n\r\n    /**\r\n     * Format bytes to human readable format\r\n     * Trims the tailing zeros\r\n     *\r\n     * {@link https://stackoverflow.com/a/18650828/11468937}\r\n     * @see MegaUtil.bytesToSize\r\n     * @param {number} bytes\r\n     * @param {number} [decimals=2]\r\n     * @returns {string}\r\n     */\r\n    static bytesToSize(bytes, decimals = 2) {\r\n        if (bytes === 0) {\r\n            return \"0 B\";\r\n        }\r\n        const k = 1024;\r\n        decimals = decimals < 0 ? 0 : decimals;\r\n        const sizes = [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\r\n\r\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n        return Number.parseFloat((bytes / Math.pow(k, i)).toFixed(decimals)) + \" \" + sizes[i];\r\n    }\r\n\r\n    /**\r\n     * @example\r\n     * await Util.sleep(50);\r\n     *\r\n     * @param {number} ms milliseconds\r\n     * @param {boolean} inNextEventLoopTask - if passed 0 wait for the next event loop task, or no (use micro task)\r\n     * @returns {Promise}\r\n     */\r\n    static sleep(ms, inNextEventLoopTask = false) {  //todo rework (true be default)\r\n        if (ms <= 0) {\r\n            if (inNextEventLoopTask) {\r\n                return Util.nextEventLoopTask();\r\n            } else {\r\n                return Promise.resolve(); // It's not the same thing as using `setImmediate`\r\n            }\r\n        }\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n\r\n    /**\r\n     * Return a promise that fulfills at the next event loop task\r\n     * Use to split a long time work to multiple tasks\r\n     *\r\n     * @example\r\n     * doWorkPart1();\r\n     * await Util.nextEventLoopTask();\r\n     * doWorkPart2();\r\n     *\r\n     * @returns {Promise}\r\n     */\r\n    static nextEventLoopTask() {\r\n        return new Promise(resolve => {\r\n            Util.setImmediate(resolve);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Transforms an object like this: `{\"n\": \"e1ogxQ7T\"}` to `\"n=e1ogxQ7T\"`\r\n     * and adds it to the url as search params. The example result: `${url}?n=e1ogxQ7T`.\r\n     *\r\n     * @param {URL} url\r\n     * @param {Object} searchParams\r\n     */\r\n    static addSearchParamsToURL(url, searchParams) {\r\n        Object.entries(searchParams).forEach(([key, value]) => {\r\n            url.searchParams.append(key, value.toString());\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param {function} executable - an async function to repeat if it throws an exception\r\n     * @param {number} count=5 - count of the repeats\r\n     * @param {number} delay=5000 - ms to wait before repeating\r\n     * @return {Promise<*>}\r\n     */\r\n    static async repeatIfErrorAsync(executable, count = 5, delay = 5000) { //todo make `delay` iterable\r\n        for (let i = 0;; i++) {\r\n            try {\r\n                if (i) {\r\n                    console.log(\"REPEAT\");\r\n                }\r\n                return await executable();\r\n            } catch (e) {\r\n                console.error(e, `ERROR! Will be repeated. The try ${i + 1} of ${count}.`);\r\n                if (i < count) {\r\n                    await Util.sleep(delay);\r\n                } else {\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {string} name\r\n     * @return {string}\r\n     */\r\n    static getSafeName(name) {\r\n        //todo implement this:\r\n        // https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file\r\n        if (name.includes(\"/\")) {\r\n            console.log(`Bad filename: \"${name}\"`); // for debugging currently\r\n        }\r\n        return name.replace(\"/\", \"_\");\r\n    }\r\n    //todo isSafeName() - the similar method\r\n\r\n    /**\r\n     * The simple implementation\r\n     * @param {Array|TypedArray} array1\r\n     * @param {Array|TypedArray} array2\r\n     * @return {boolean}\r\n     */\r\n    static compareArrays(array1, array2) {\r\n        if (array1.length === array2.length) {\r\n            for (let i = 0; i < array1.length; i++) {\r\n                if (array1[i] !== array2[i]) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Convert the string to the base64 encoded utf-8 bytes.\r\n     *\r\n     * With default mode \"default\" it uses `unescape` function that is deprecated now,\r\n     * but it works much faster than converting with \"safe\" mode (ArrayBuffer -> binaryString -> base64).\r\n     * With \"unsafe\" mode the sting must be Latin1 encoded, or you get the exception in a browser\r\n     * (\"DOMException: Failed to execute 'btoa' on 'Window':\r\n     *     the string to be encoded contains characters outside of the Latin1 range.\") or the wrong result in Node.js.\r\n     *\r\n     * For node.js you can use:\r\n     * `Buffer.from(string).toString(\"base64\")`\r\n     *\r\n     * @param {string} string\r\n     * @param {\"default\"|\"safe\"|\"unsafe\"} [mode=\"default\"]\r\n     * @returns {string} base64\r\n     */\r\n    static stringToBase64(string, mode = \"default\") {\r\n        if (mode === \"default\") {       // uses deprecated `escape` function\r\n            const binaryString = unescape(encodeURIComponent(string));\r\n            return Util.binaryStringToBase64(binaryString);\r\n        } else if (mode === \"safe\") {   // works slower (~3x)\r\n            const arrayBuffer = new TextEncoder().encode(string);\r\n            return Util.arrayBufferToBase64(arrayBuffer);\r\n        } else if (mode === \"unsafe\") { // only for Latin1 within Base64\r\n            return Util.binaryStringToBase64(string);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Convert the Base64 encoded string of utf-8 bytes to the string.\r\n     *\r\n     * @param {string} base64\r\n     * @param {\"default\"|\"safe\"|\"unsafe\"} [mode=\"default\"]\r\n     * @returns {string}\r\n     */\r\n    static base64ToString(base64, mode = \"default\") {\r\n        if (mode === \"default\") {       // uses deprecated `escape` function\r\n            const binaryString = Util.base64ToBinaryString(base64);\r\n            return decodeURIComponent(escape(binaryString));\r\n        } else if (mode === \"safe\") {   // works slower (~x4+)\r\n            const arrayBuffer = Util.base64ToArrayBuffer(base64);\r\n            return new TextDecoder().decode(arrayBuffer);\r\n        } else if (mode === \"unsafe\") { // only for Latin1 within Base64\r\n            return Util.base64ToBinaryString(base64);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Make ReadableStream iterable\r\n     *\r\n     * @example\r\n     *  for await (const chunk of iterateReadableStream(stream)) {\r\n     *      i++;                 // If you do not want to block event loop.\r\n     *      if (i % 128 === 0) { // Note: it has negative impact for performance: ~7 %, without `if`: ~30 %.\r\n     *          await new Promise(resolve => setImmediate(resolve));\r\n     *      }\r\n     *      handle(chunk);\r\n     * }\r\n     *\r\n     * @template T\r\n     * @param {ReadableStream<T>} stream\r\n     * @returns {AsyncGenerator<T>}\r\n     */\r\n    static async * iterateReadableStream(stream) {\r\n        const reader = stream.getReader();\r\n        while (true) {\r\n            const {done, value} = await reader.read();\r\n            if (done) {\r\n                break;\r\n            }\r\n            yield value;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Browsers' MessagePort has no `unref`/`ref`,\r\n     * but the realization for Node requires to use them so let's just use `globalThis.setImmediate`.\r\n     */\r\n    static setImmediate = globalThis.setImmediate ||\r\n        /*#__PURE__*/ (function() {\r\n            const {port1, port2} = new MessageChannel();\r\n            const queue = [];\r\n\r\n            port1.onmessage = function() {\r\n                const callback = queue.shift();\r\n                callback();\r\n                // if (!queue.length) {\r\n                //     port1.unref();\r\n                // }\r\n            };\r\n            // port1.unref();\r\n\r\n            return function(callback) {\r\n                // port1.ref();\r\n                port2.postMessage(null);\r\n                queue.push(callback);\r\n            };\r\n        })();\r\n\r\n\r\n    // https://developers.google.com/web/updates/2011/09/Workers-ArrayBuffer\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\r\n    static structuredClone(object) {\r\n        return new Promise(resolve => {\r\n            const {port1, port2} = new MessageChannel();\r\n            port1.onmessage = function(message) {\r\n                resolve(message.data);\r\n            };\r\n            port2.postMessage(object);\r\n        });\r\n    }\r\n\r\n    // // the experimental version\r\n    // static logger = {\r\n    //     DEBUG: true,\r\n    //     INFO: true,\r\n    //     /**\r\n    //      * @param {*} arguments\r\n    //      */\r\n    //     debug() {\r\n    //         if (!Util.logger.DEBUG) {\r\n    //             return;\r\n    //         }\r\n    //         // rollup says: \"A static class field initializer may not contain arguments\"\r\n    //         [...arguments].forEach(el => {\r\n    //             console.log(el);\r\n    //         });\r\n    //         console.log();\r\n    //     },\r\n    //     /**\r\n    //      * @param {*} arguments\r\n    //      */\r\n    //     info() {\r\n    //         if (!Util.logger.INFO) {\r\n    //             return;\r\n    //         }\r\n    //         // rollup says: \"A static class field initializer may not contain arguments\"\r\n    //         [...arguments].forEach(el => {\r\n    //             console.log(el);\r\n    //         });\r\n    //     }\r\n    // };\r\n}","// import {default as CryptoJS} from \"crypto-es\";      // or\r\n// import CryptoJS from \"./dependencies/crypto-es.js\"; // or\r\nimport {CryptoJS} from \"./dependencies/all.js\";\r\n\r\nexport default class Crypto {\r\n    /**\r\n     * Decrypt AES with `CryptoJS` (Upd: CryptoES)\r\n     *\r\n     * Modes: \"CBC\" (the default), \"CFB\", \"CTR\", \"OFB\", \"ECB\".\r\n     *\r\n     * Padding schemes: \"Pkcs7\" (the default), \"ZeroPadding\", \"NoPadding\", \"Iso97971\", \"AnsiX923\", \"Iso10126\".\r\n     *\r\n     * Default IV is zero filled ArrayBuffer.\r\n     *\r\n     * @param {Uint8Array} data\r\n     * @param {Uint8Array} key\r\n     * @param {Object} [config]\r\n     * @param {Uint8Array} [config.iv]\r\n     * @param {\"CBC\"|\"CFB\"|\"CTR\"|\"OFB\",|\"ECB\"} [config.mode=\"CBC\"]\r\n     * @param {\"Pkcs7\"|\"ZeroPadding\"|\"NoPadding\"|\"Iso97971\"|\"AnsiX923\"|\"Iso10126\"} [config.padding=\"Pkcs7\"]\r\n     * @returns {Uint8Array}\r\n     */\r\n    static decryptAES(data, key, {iv, mode, padding} = {}) {\r\n\r\n        /** Default parameters initialization */\r\n        iv = iv || new Uint8Array(key.length);\r\n        mode = mode || \"CBC\";\r\n        padding = padding || \"Pkcs7\";\r\n\r\n        /**\r\n         * The convert code [*] is from \"crypto-js/lib-typedarrays.js\" file\r\n         * Note: a \"word\" is a 32 bits big-endian signed integer\r\n         *\r\n         * @param {Uint8Array} u8Array // todo use \"u8Array\" name in other files\r\n         * @returns {CryptoES.lib.WordArray} wordArray\r\n         * @private\r\n         */\r\n        const _arrayBufferToWordArray = function(u8Array) { // todo: remove in the next commit\r\n            const length = Math.trunc(u8Array.length / 4) + (u8Array.length % 4 ? 1 : 0); // \"round up\" // todo Math.ceil\r\n            const words = new Array(length);\r\n            for (let i = 0; i < u8Array.length; i++) {\r\n                words[i >>> 2] |= u8Array[i] << (24 - (i % 4) * 8); // [*]\r\n            }\r\n            return CryptoJS.lib.WordArray.create(words, u8Array.length); // the passing ArrayBuffer works only with CryptoES, not CryptoJS\r\n        };\r\n\r\n        /**\r\n         * Works more than x3-8 faster! but dependent of the endianness. only little-endian.\r\n         * @param {Uint8Array} u8Array\r\n         */\r\n        const _arrayBufferToWordArray2 = function(u8Array) { // todo: remove in the next commit\r\n            const length = Math.trunc(u8Array.length / 4) + (u8Array.length % 4 ? 1 : 0);\r\n            // Note: Uint8Array may be a presentation just of a part of the buffer [!]\r\n            const u32array = new Int32Array(u8Array.buffer, u8Array.byteOffset, length);\r\n            const words = new Array(u32array.length);\r\n            for (let i = 0; i < words.length; i++) { // 255 === 0b00000000_00000000_00000000_11111111\r\n                words[i] = ((u32array[i] >> 0 & 255) << 24) | ((u32array[i] >> 8 & 255) << 16) | ((u32array[i] >> 16 & 255) << 8) | ((u32array[i] >> 24 & 255) << 0);\r\n            }\r\n            return CryptoJS.lib.WordArray.create(words, u8Array.length);\r\n        };\r\n\r\n        /**\r\n         * A bit slower than v2 (~10 %), but independent of the endianness\r\n         * @param {Uint8Array} u8Array\r\n         */\r\n        const _arrayBufferToWordArray3 = function(u8Array) { // todo: remove in the next commit\r\n            const length = Math.trunc(u8Array.length / 4) + (u8Array.length % 4 ? 1 : 0);\r\n            const words = new Array(length);\r\n            for (let i = 0; i < length; i++) {\r\n                words[i] = (u8Array[i*4] << 24) | (u8Array[i*4+1] << 16) | (u8Array[i*4+2] << 8) | (u8Array[i*4+3] << 0);\r\n            }\r\n            return CryptoJS.lib.WordArray.create(words, u8Array.length);\r\n        };\r\n\r\n\r\n        /**\r\n         * THE BEST\r\n         *\r\n         * Faster 5-9 times than old one. (x5 for zeros, x9+ for random values)\r\n         *\r\n         * Endianness independent.\r\n         * @param {Uint8Array} u8Array\r\n         */\r\n        const _arrayBufferToWordArray4 = function(u8Array) {\r\n            const length = Math.trunc(u8Array.length / 4) + (u8Array.length % 4 ? 1 : 0);\r\n            const view = new DataView(u8Array.buffer, u8Array.byteOffset, u8Array.byteLength);\r\n            const words = new Array(length);\r\n            for (let i = 0; i < length; i++) {\r\n                words[i] = view.getInt32(i * 4, false);\r\n            }\r\n            return CryptoJS.lib.WordArray.create(words, u8Array.byteLength);\r\n        };\r\n\r\n        const _data = _arrayBufferToWordArray4(data);\r\n        const _key = _arrayBufferToWordArray4(key);\r\n        const _iv = _arrayBufferToWordArray4(iv);\r\n        const plaintextWA = CryptoJS.AES.decrypt( /* (CipherParamsData, WordArray, IBlockCipherCfg) (for CryptoJS) */\r\n            {\r\n                ciphertext: _data\r\n            },\r\n            _key,\r\n            {\r\n                iv: _iv,\r\n                mode: CryptoJS.mode[mode],\r\n                padding: CryptoJS.pad[padding]\r\n            }\r\n        );\r\n\r\n        /**\r\n         * The convert code [*] is from CryptoJS.enc.Latin1.stringify (\"crypto-js/core.js\")\r\n         * See CryptoJS.enc.Latin1 stringify()\r\n         * Note: \"word\" is a 32 bits big-endian signed integer\r\n         *\r\n         * @param {CryptoES.lib.WordArray} wordArray\r\n         * @returns {Uint8Array}\r\n         * @private\r\n         */\r\n        const _wordArrayToArrayBuffer = function(wordArray) { // todo: remove in the next commit\r\n            const u8Array = new Uint8Array(wordArray.sigBytes);\r\n            for (let i = 0; i < wordArray.sigBytes; i++) {\r\n                u8Array[i] = (wordArray.words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff; // [*]\r\n            }\r\n            return u8Array;\r\n        };\r\n        // THE BEST: 4 times faster\r\n        const _wordArrayToArrayBuffer2 = function(wordArray) {\r\n            const {words, sigBytes} = wordArray;\r\n            const arrayBuffer = new ArrayBuffer(words.length * 4);\r\n            const view = new DataView(arrayBuffer);\r\n            for (let i = 0; i < words.length; i++) {\r\n                view.setInt32(i * 4, words[i], false);\r\n            }\r\n            return new Uint8Array(arrayBuffer, 0, sigBytes);\r\n        };\r\n\r\n        return _wordArrayToArrayBuffer2(plaintextWA);\r\n    }\r\n}","import Util from \"./util.js\";\r\nimport Crypto from \"./crypto.js\";\r\n\r\n/**\r\n * The class contains Mega specific static util methods.\r\n */\r\nexport default class MegaUtil {\r\n\r\n    /**\r\n     * @param {string} attributesEncoded\r\n     * @param {Uint8Array} nodeKey\r\n     * @returns {{name: string, serializedFingerprint: string}}\r\n     */\r\n    static parseEncodedNodeAttributes(attributesEncoded, nodeKey) {\r\n        const attributesEncrypted   = MegaUtil.megaBase64ToArrayBuffer(attributesEncoded);\r\n        const attributesArrayBuffer = Crypto.decryptAES(attributesEncrypted, nodeKey, {padding: \"ZeroPadding\"});\r\n        const attributesPlane       = Util.arrayBufferToUtf8String(attributesArrayBuffer);\r\n\r\n        const trimmedAttributesPlaneString = attributesPlane.substring(\"MEGA\".length);\r\n        const {\r\n            n: name,\r\n            c: serializedFingerprint // Only for files (not folders)\r\n        } = JSON.parse(trimmedAttributesPlaneString);\r\n\r\n        return {name, serializedFingerprint};\r\n    }\r\n\r\n    /**\r\n     * @param {string} serializedFingerprint\r\n     * @returns {{modificationDate: number, fileChecksum: Uint8Array}}\r\n     */\r\n    static parseFingerprint(serializedFingerprint) {\r\n        const fingerprintBytes = MegaUtil.megaBase64ToArrayBuffer(serializedFingerprint);\r\n\r\n        const fileChecksum    = fingerprintBytes.subarray(0, 16); // 4 CRC32 of the file [unused]\r\n        const timeBytesLength = fingerprintBytes[16];             // === 4, and 5 after 2106.02.07 (06:28:15 UTC on Sunday, 7 February 2106)\r\n        const timeBytes       = fingerprintBytes.subarray(17, 17 + timeBytesLength); // in fact, after this no data is\r\n\r\n        // I don't think that it is necessary, but let it be\r\n        if (timeBytesLength > 5) {\r\n            throw \"Invalid value: timeBytesLength = \" + timeBytesLength;\r\n        }\r\n\r\n        const modificationDate = Util.arrayBufferToLong(timeBytes);\r\n\r\n        return {modificationDate, fileChecksum};\r\n    }\r\n\r\n    /**\r\n     * {@link https://github.com/gpailler/MegaApiClient/blob/93552a027cf7502292088f0ab25f45eb29ebdc64/MegaApiClient/Cryptography/Crypto.cs#L63}\r\n     * @param {Uint8Array} decryptedKey\r\n     * @returns {{iv: Uint8Array, metaMac: Uint8Array, key: Uint8Array}}\r\n     */\r\n    static decryptionKeyToParts(decryptedKey) {\r\n        const iv      = decryptedKey.subarray(16, 24);\r\n        const metaMac = decryptedKey.subarray(24, 32);\r\n        const key     = new Uint8Array(16);\r\n\r\n        // 256 bits -> 128 bits\r\n        for (let i = 0; i < 16; i++) {\r\n            key[i] = decryptedKey[i] ^ decryptedKey[i + 16];\r\n        }\r\n\r\n        return {iv, metaMac, key};\r\n    }\r\n\r\n    /**\r\n     * {@link https://github.com/gpailler/MegaApiClient/blob/93552a027cf7502292088f0ab25f45eb29ebdc64/MegaApiClient/Cryptography/Crypto.cs#L33}\r\n     * @param {Uint8Array} encryptedKey a key that need to decrypt\r\n     * @param {Uint8Array} key a key to decrypt with it\r\n     * @returns {Uint8Array} decryptionKey\r\n     */\r\n    static decryptKey(encryptedKey, key) {\r\n        const result = new Uint8Array(encryptedKey.length);\r\n\r\n        for (let i = 0; i < encryptedKey.length; i += 16) {\r\n            const block = encryptedKey.subarray(i, i + 16);\r\n            const decryptedBlock = Crypto.decryptAES(block, key, {padding: \"NoPadding\"}); // \"NoPadding\" – for the case when the last byte is zero (do not trim it)\r\n            result.set(decryptedBlock, i);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // ----------------------------------------------------------------\r\n\r\n    /**\r\n     * Transform Mega Base64 format to normal Base64\r\n     *   \"AWJuto8_fhleAI2WG0RvACtKkL_s9tAtvBXXDUp2bQk\"\r\n     *   ->\r\n     *   \"AWJuto8/fhleAI2WG0RvACtKkL/s9tAtvBXXDUp2bQk=\"\r\n     * @param {string} megaBase64EncodedStr\r\n     * @returns {string}\r\n     */\r\n    static megaBase64ToBase64(megaBase64EncodedStr) {\r\n        /** @param {string} megaBase64EncodedStr\r\n         *  @returns {number}\r\n         *  @private  */\r\n        function _getPaddingLengthForMegaBase64(megaBase64EncodedStr) {\r\n            /**\r\n             * Base64 padding's length is \"1\", \"2\" or \"0\" because of the \"block\" size has at least \"2\" chars.\r\n             * So a string's length is multiple of \"4\".\r\n             * Check the tables:\r\n             *     https://en.wikipedia.org/wiki/Base64#Examples\r\n             */\r\n            const paddingLength = (4 - megaBase64EncodedStr.length % 4) % 4;\r\n            if (paddingLength === 3) {\r\n                throw {name: \"IllegalArgumentException\", message: \"Wrong Mega Base64 string\"};\r\n            }\r\n            return paddingLength;\r\n        }\r\n\r\n        const paddingLength = _getPaddingLengthForMegaBase64(megaBase64EncodedStr);\r\n        const result = megaBase64EncodedStr + \"=\".repeat(paddingLength);\r\n        return result.replace(/-/g, \"+\")\r\n                     .replace(/_/g, \"/\");\r\n    }\r\n\r\n    /**\r\n     * @param {string} megaBase64\r\n     * @returns {Uint8Array}\r\n     */\r\n    static megaBase64ToArrayBuffer(megaBase64) {\r\n        const base64 = MegaUtil.megaBase64ToBase64(megaBase64);\r\n        return Util.base64ToArrayBuffer(base64);\r\n    }\r\n\r\n    /**\r\n     * @param {string} base64EncodedStr\r\n     * @return {string}\r\n     */\r\n    static base64ToMegaBase64(base64EncodedStr) {\r\n        return base64EncodedStr.replace(/=/g,  \"\")\r\n                               .replace(/\\+/g, \"-\")\r\n                               .replace(/\\//g, \"_\");\r\n    }\r\n\r\n    /**\r\n     * @param {Uint8Array} arrayBuffer\r\n     * @return {string}\r\n     */\r\n    static arrayBufferToMegaBase64(arrayBuffer) {\r\n        const binaryString = Util.arrayBufferToBinaryString(arrayBuffer);\r\n        const base64 = Util.binaryStringToBase64(binaryString);\r\n        return MegaUtil.base64ToMegaBase64(base64);\r\n    }\r\n\r\n    /**\r\n     * @param {string} megaBase64\r\n     * @returns {string}\r\n     */\r\n    static megaBase64ToBinaryString(megaBase64) {\r\n        const base64 = MegaUtil.megaBase64ToBase64(megaBase64);\r\n        return Util.base64ToBinaryString(base64);\r\n    }\r\n\r\n    // ----------------------------------------------------------------\r\n\r\n    /**\r\n     * Format bytes to human readable format like it do Mega.nz\r\n     * {@link https://github.com/meganz/webclient/blob/8e867f2a33766872890c462e2b51561228c056a0/js/functions.js#L298}\r\n     *\r\n     * (Yeah, I have rewrote this)\r\n     * @see Util.bytesToSize\r\n     * @param {number} bytes\r\n     * @param {number} [decimals]\r\n     * @returns {string}\r\n     */\r\n    static bytesToSize(bytes, decimals) {\r\n        if (bytes === 0) {\r\n            return \"0 B\";\r\n        }\r\n        const k = 1024;\r\n        if (!decimals) {\r\n            if (bytes > Math.pow(k, 3)) {        // GB\r\n                decimals = 2;\r\n            } else if (bytes > Math.pow(k, 2)) { // MB\r\n                decimals = 1;\r\n            }\r\n        }\r\n        const sizes = [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\r\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n        return (bytes / Math.pow(k, i)).toFixed(decimals) + \" \" + sizes[i];\r\n    }\r\n}","import {performance} from \"./browser-context.js\";\r\nimport Util from \"./util.js\";\r\n\r\nexport class Semaphore {\r\n    /**\r\n     * By default works like a mutex\r\n     * @param {number} limit - the max count of parallel executions\r\n     * @param {number} time  - the time within which does not allowed to perform more than `limit` operations. (ms)\r\n     */\r\n    constructor(limit = 1, time = 0) {\r\n        this.limit = limit;\r\n        this.delay = time;\r\n    }\r\n\r\n    /** @type {number} - the count of active parallel executions */\r\n    active = 0;\r\n    /** @type {(function: void)[]} - resolve functions of enqueued executions */\r\n    pending = [];\r\n    /** @type {number[]} - finish times of completed executions (it's used when there is no enqueued executions) */\r\n    completeTimes = [];\r\n\r\n    /** @return {Promise<void>} */\r\n    async acquire() {\r\n        if (this.isDisabled) {\r\n            return;\r\n        }\r\n\r\n        const completed = this.completeTimes.length;\r\n        if (completed > 0 && completed === this.limit - this.active) {\r\n            const time = this.delay - (performance.now() - this.completeTimes.shift());\r\n            console.log(\"completed: \" + completed + \", active: \" + this.active + \", wait: \" + time);\r\n            await Util.sleep(time);\r\n        }\r\n\r\n        if (this.active < this.limit) {\r\n            this.active++;\r\n            return;\r\n        }\r\n\r\n        return new Promise(resolve => {\r\n            this.pending.push(resolve);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Recommendation: release in a finally block.\r\n     */\r\n    release() {\r\n        // Just do not return a Promise\r\n        this._release().then(/*ignore promise*/);\r\n    }\r\n\r\n    /** @private */\r\n    async _release() {\r\n        if (this.isDisabled) {\r\n            return;\r\n        }\r\n\r\n        if (this.active > 0) {\r\n            this.active--;\r\n\r\n            if (this.pending.length > 0) {\r\n                const resolve = this.pending.shift();\r\n                this.active++;\r\n                await Util.sleep(this.delay);\r\n                resolve();\r\n            } else if (this.delay > 0) {\r\n                this.completeTimes.push(performance.now());\r\n            }\r\n        } else {\r\n            console.warn(\"[Semaphore] over released\"); // a possible error is in a code\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Note (It's important, in other case the semaphore will not work):\r\n     * When you want to limit the parallel execution count of an async function\r\n     * use `return` statement in the \"executable\" callback,\r\n     * or use `await` statement in the \"executable\" callback if you do not need the result.\r\n     *\r\n     * @example\r\n     * const semaphore = new Semaphore(4);\r\n     * for (const value of values) {\r\n     *      semaphore.sync(() => {\r\n     *          return handle(value);\r\n     *      }).then(console.log); // result of `handle`\r\n     * }\r\n     * @example\r\n     * const semaphore = new Semaphore(4);\r\n     * for (const value of values) {\r\n     *      semaphore.sync(async () => {\r\n     *          await handle(value);\r\n     *      }).then(console.log); // `undefined`\r\n     * }\r\n     *\r\n     * @param {function(): Promise<*>} executable\r\n     * @return {Promise<*>}\r\n     */\r\n    async sync(executable) {\r\n        try {\r\n            await this.acquire();\r\n            return await executable();\r\n        } finally {\r\n            this.release();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Release all waiters without any delay\r\n     */\r\n    releaseAll() {\r\n        while (this.pending.length) {\r\n            const resolve = this.pending.shift();\r\n            resolve();\r\n        }\r\n        this.active = 0;\r\n        this.completeTimes = [];\r\n    }\r\n\r\n    _limit;\r\n    _delay;\r\n\r\n    set limit(value) {\r\n        if (value < 1) {\r\n            this._limit = 1;\r\n        } else {\r\n            this._limit = value;\r\n        }\r\n    }\r\n\r\n    get limit() {\r\n        return this._limit;\r\n    }\r\n\r\n    set delay(value) {\r\n        if (value < 0) {\r\n            this._delay = 0;\r\n        } else {\r\n            this._delay = value;\r\n        }\r\n    }\r\n\r\n    get delay() {\r\n        return this._delay;\r\n    }\r\n\r\n    isDisabled = false;\r\n\r\n    disable(releaseAll = true) {\r\n        if (releaseAll) {\r\n            this.releaseAll();\r\n        }\r\n        this.isDisabled = true;\r\n    }\r\n\r\n    enable() {\r\n        this.isDisabled = false;\r\n    }\r\n\r\n    /**\r\n     * Static factory method, works as constructor.\r\n     * Returns the disabled semaphore.\r\n     * Pass it to a code that expect a semaphore, but you do not need it.\r\n     */\r\n    static disabled(max = 1, delay = 0) {\r\n        const semaphore = new Semaphore(max, delay);\r\n        semaphore.disable();\r\n        return semaphore;\r\n    }\r\n}\r\n\r\nexport class CountDownLatch {\r\n    _count;\r\n    _promise;\r\n    _resolve;\r\n\r\n    /** @param {number} count */\r\n    constructor(count = 0) {\r\n        this._count = count;\r\n        if (count > 0) {\r\n            this._promise = new Promise(resolve => {\r\n                this._resolve = resolve;\r\n            });\r\n        } else {\r\n            this._promise = Promise.resolve();\r\n        }\r\n    }\r\n\r\n    countDown() {\r\n        if (this._count > 0) {\r\n            this._count--;\r\n            if (this._count === 0) {\r\n                this._resolve();\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @return {Promise<void>} */\r\n    wait() {\r\n        return this._promise;\r\n    }\r\n\r\n    /** @return {boolean} */\r\n    get released() {\r\n        return this._count > 0;\r\n    }\r\n\r\n    release() {\r\n        this._count = 0;\r\n        this._resolve();\r\n    }\r\n}\r\n\r\nexport class CountUpAndDownLatch extends CountDownLatch {\r\n    countUp() {\r\n        if (this._count === 0) {\r\n            this._promise = new Promise(resolve => {\r\n                this._resolve = resolve;\r\n            });\r\n        }\r\n        this._count++;\r\n    }\r\n}\r\n\r\nexport default {Semaphore, CountDownLatch, CountUpAndDownLatch};","/**\r\n * @typedef {Function} Resolve\r\n */\r\n\r\n/** @template K, V, R */\r\nclass SimpleEntry {\r\n    /** @type {function(Resolve): void} */\r\n    resolve;\r\n\r\n    /**\r\n     * @param {K} key - group criterion\r\n     * @param {V} value\r\n     * @param {Resolve} resolve\r\n     * @param {Function} reject\r\n     */\r\n    constructor(key, value, resolve, reject) {\r\n        this.key     = key;\r\n        this.value   = value;\r\n        this.resolve = resolve;\r\n        this.reject  = reject;\r\n    }\r\n\r\n    /** @return {K} */\r\n    getKey() {\r\n        return this.key;\r\n    }\r\n\r\n    /** @return {V} */\r\n    getValue() {\r\n        return this.value;\r\n    }\r\n\r\n    /**\r\n     * Override if you implement `getResult()`\r\n     * @default\r\n     * @return {boolean}\r\n     */\r\n    needHandle() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @abstract\r\n     * @return {R}\r\n     */\r\n    getResult() {\r\n        throw \"SimpleEntry.getResult() method does not implemented\";\r\n    }\r\n}\r\n\r\n/** @template K, V, R */\r\nclass EntriesHolder {\r\n    /** @type {K} */\r\n    key;\r\n    /** @type {SimpleEntry<K, V, R>} */\r\n    first;\r\n\r\n    /**\r\n     * @param {K} entryKey\r\n     * @param {SimpleEntry<K, V, R>} firstEntry\r\n     * @param {GroupedTasks<K, V, R>} groupedTasks\r\n     */\r\n    constructor(entryKey, firstEntry, groupedTasks) {\r\n        this.key = entryKey;\r\n        this.first = firstEntry;\r\n        this.groupedTasks = groupedTasks;\r\n    }\r\n\r\n    /** @return {SimpleEntry<K, V, R>[]} */\r\n    pull() {\r\n        return this.groupedTasks.pullEntries(this.key);\r\n    }\r\n\r\n    /**\r\n     * If passed `0` - no splitting\r\n     * @param count\r\n     * @return {Generator<SimpleEntry<K, V, R>[]>}\r\n     */\r\n    parts(count) {\r\n        return this.groupedTasks.pullParts(this.key, count);\r\n    }\r\n}\r\n\r\n/**\r\n * @template K, V, R\r\n * @abstract\r\n */\r\nclass GroupedTasks {\r\n\r\n    /**\r\n     * @param {SimpleEntry<K, V, R>} entryClass\r\n     * @param {Function} delayStrategy\r\n     */\r\n    constructor({entryClass, delayStrategy} = {}) {\r\n        this.entryClass = entryClass || GroupedTasks.SimpleEntry;\r\n        this.delayStrategy = delayStrategy || GroupedTasks.execute.afterDelayWithMicroTask;\r\n    }\r\n\r\n    /**\r\n     * @type {Class<SimpleEntry<K, V, R>>}\r\n     */\r\n    static SimpleEntry = SimpleEntry;\r\n\r\n    /**\r\n     * @type Map<K, SimpleEntry<K, V, R>[]>\r\n     * @private\r\n     */\r\n    queue = new Map();\r\n\r\n    /**\r\n     * @param {Object} init\r\n     * @param {K?} init.key\r\n     * @param {V?} init.value\r\n     * @return {Promise<R>}\r\n     */\r\n    getResult({key, value}) {\r\n        return new Promise((resolve, reject) => {\r\n            const entry = new this.entryClass(key, value, resolve, reject);\r\n            if (entry.needHandle()) {\r\n                this.enqueue(entry);\r\n            } else {\r\n                resolve(entry.getResult());\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param {SimpleEntry<K, V, R>} entry\r\n     * @private\r\n     */\r\n    enqueue(entry) {\r\n        const entryKey = entry.getKey();\r\n        if (!this.queue.has(entryKey)) {\r\n            this.queue.set(entryKey, []);\r\n            this.delayStrategy(() => {\r\n                this.handle(new EntriesHolder(entryKey, entry, this))\r\n                    .catch(entry.reject);\r\n            });\r\n        }\r\n        this.queue.get(entryKey).push(entry);\r\n    }\r\n\r\n    /**\r\n     * @param {K} key\r\n     * @return {SimpleEntry<K, V, R>[]}\r\n     */\r\n    pullEntries(key) {\r\n        const array = this.queue.get(key);\r\n        this.queue.delete(key);\r\n        return array;\r\n    }\r\n\r\n    /**\r\n     * @param {K} key\r\n     * @param {Number} count\r\n     * @return {Generator<SimpleEntry<K, V, R>[]>}\r\n     */\r\n    *pullParts(key, count) {\r\n        const array = this.pullEntries(key);\r\n\r\n        if (!count) {\r\n            yield array;\r\n        } else {\r\n            let pos = 0;\r\n            while (pos < array.length) {\r\n                yield array.slice(pos, pos + count);\r\n                pos += count;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @abstract\r\n     * @param {EntriesHolder<K, V, R>} entriesHolder\r\n     * @return {Promise<void>}\r\n     */\r\n    async handle(entriesHolder) {}\r\n\r\n    /** Contains methods to delay the execution of the passed callback */\r\n    static execute = class {\r\n        static now(executable) {\r\n            executable();\r\n        }\r\n        static afterDelayWithMicroTask(executable){ // Delay execution with micro task queue\r\n            Promise.resolve().then(executable);\r\n        }\r\n        static afterDelayWithEventLoop(executable){\r\n            setImmediate ? setImmediate(executable) : setTimeout(executable, 0);\r\n        }\r\n        static afterDelay(executable, ms = 0){\r\n            setTimeout(executable, ms);\r\n        }\r\n    }\r\n}\r\n\r\nexport default GroupedTasks;\r\nexport {GroupedTasks, SimpleEntry};","import {fetch} from \"./browser-context.js\";\r\nimport Util from \"./util.js\";\r\nimport MegaUtil from \"./mega-util.js\";\r\nimport {Semaphore} from \"./synchronization.js\";\r\nimport GroupedTasks from \"./grouped-tasks.js\";\r\n\r\nexport default class MegaApi {\r\n\r\n    static apiGateway = \"https://g.api.mega.co.nz/cs\";\r\n    static grouped = true;\r\n\r\n    static errorRepeatCount = 5;\r\n    static errorRepeatDelay = 5000;\r\n    /**\r\n     * @param {function} executable - an async function to repeat if it throws an exception\r\n     * @param {number} count=5 - count of the repeats\r\n     * @param {number} delay=5000 - ms to wait before repeating\r\n     * @return {Promise<*>}\r\n     */\r\n    static repeatIfErrorAsync(executable, count = MegaApi.errorRepeatCount, delay = MegaApi.errorRepeatDelay) {\r\n        return Util.repeatIfErrorAsync(executable, count, delay);\r\n    }\r\n\r\n    static ssl = 2; // Is there a difference between \"1\" and \"2\" [???]\r\n    /**\r\n     * Max parallel requests count that Mega allows for API access are `63` within ~4 seconds.\r\n     * If you perform more than 63 connection within ~4 seconds:\r\n     * Fetch error (reason: write EPROTO) will happen (not a big problem, the request will be repeated)\r\n     *\r\n     * Example values: (63, 4000);   (12, 650);   (2, 0);\r\n     */\r\n    static semaphore = new Semaphore(16, 1000);\r\n\r\n    /**\r\n     * @extends {GroupedTasks<String, Object, Object>}\r\n     * @private\r\n     */\r\n    static RequestApiGrouped = class extends GroupedTasks {\r\n        async handle(entriesHolder) {\r\n            const url = entriesHolder.key;\r\n\r\n            const entries = entriesHolder.pull();\r\n            const payloads = [];\r\n            for (const entry of entries) {\r\n                payloads.push(entry.getValue());\r\n            }\r\n\r\n            const responseArray = await MegaApi.requestApiSafe(url, payloads);\r\n            console.log(\"[grouped request]\", responseArray);\r\n\r\n            entries.forEach((entry, index) => {\r\n                entry.resolve(responseArray[index]);\r\n            });\r\n        }\r\n    }\r\n    /** @private */\r\n    static requestApiGrouped = new MegaApi.RequestApiGrouped();\r\n\r\n    /**\r\n     * @param {*} payload\r\n     * @param {*} [searchParams]\r\n     * @param {boolean} [grouped]\r\n     * @returns {Promise<*>} responseData\r\n     */\r\n    static async requestApi(payload, searchParams = {}, grouped = MegaApi.grouped) {\r\n        const _url = new URL(MegaApi.apiGateway);\r\n        Util.addSearchParamsToURL(_url, searchParams);\r\n        const url = _url.toString();\r\n\r\n        if (grouped) {\r\n            return MegaApi.requestApiGrouped.getResult({\r\n                    key: url,\r\n                    value: payload\r\n                });\r\n        }\r\n        return (await MegaApi.requestApiSafe(url, [payload]))[0];\r\n    }\r\n\r\n    /**\r\n     * Note: If you move `semaphore` inside `requestApi` or `repeatIfErrorAsync`, then in case an error\r\n     * the repeating request will be added at the end of queue of `semaphore`\r\n     * @param {string|URL} url\r\n     * @param {Object[]} payloads\r\n     * @return {Promise<*[]>}\r\n     * @private\r\n     */\r\n    static async requestApiSafe(url, payloads) {\r\n        await MegaApi.semaphore.acquire();\r\n        try {\r\n            const response = await MegaApi.repeatIfErrorAsync(_ => MegaApi.requestApiUnsafe(url, payloads));\r\n            return MegaApi.apiErrorHandler(response); // todo Retry if -3 exception\r\n        } finally { // if an exception happens more than `count` times, or the error code was returned\r\n            MegaApi.semaphore.release();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns an array with one item (multiple request are not implemented), or an error code (number)\r\n     *\r\n     * An exception may be thrown by `fetch`, for example, if you perform to many connections\r\n     * or `json()` when Mega returns an empty string (if the server returns code 500)\r\n     *\r\n     * @param {string|URL} url\r\n     * @param {Object[]} payloads\r\n     * @return {Promise<*[]>}\r\n     * @private\r\n     */\r\n    static async requestApiUnsafe(url, payloads) {\r\n        const response = await fetch(url, {\r\n            method: \"post\",\r\n            body: JSON.stringify(payloads),\r\n            referrerPolicy: \"strict-origin-when-cross-origin\"\r\n        });\r\n\r\n        if (response.status === 500) {\r\n            throw Error(\"ERR_ABORTED 500 (Server Too Busy)\"); // to do not parse the empty string\r\n        } else if (response.status !== 200) {\r\n            console.error(\"[response.status]\", response.status);\r\n        }\r\n\r\n        const text = await response.text();\r\n        console.log(\"[api-response-text]\", text);\r\n        return JSON.parse(text);\r\n    }\r\n\r\n    /** @private */\r\n    static apiErrorHandler(response) {\r\n        if (Array.isArray(response)) { //todo for file links it is _in an array_\r\n            return response;\r\n        } else {\r\n            // todo v2 api error response\r\n            // todo create separate method to handle all errors\r\n            // https://mega.nz/doc\r\n            if (response === -9) {\r\n                throw new Error(\"ERROR CODE: -9. NOT FOUND\");\r\n            } else if (response === -16) {\r\n                throw new Error(\"ERROR CODE: -16. USER IS BLOCKED\");\r\n            } else if (response === -3) {\r\n                throw new Error(\"ERROR CODE: -3. AGAIN\");\r\n                //  A temporary congestion or server malfunction prevented your request from being processed.\r\n                //  No data was altered. Retry.\r\n                //  Retries must be spaced with exponential backoff. //todo\r\n            } else {\r\n                throw new Error(\"ERROR CODE: \" + response); // `response` is a number like this: `-9`\r\n            }\r\n        }\r\n    }\r\n\r\n    // ----------------------------------------------------------------\r\n\r\n    /**\r\n     * @param {FileAttribute} fileAttribute\r\n     * @param {string} fileAttribute.id - file attribute ID\r\n     * @param {number} fileAttribute.type - file attribute type\r\n     * @return {Promise<string>}\r\n     */\r\n    static async requestFileAttributeDownloadUrl({id, type}) {\r\n        console.log(\"Request download url...\");\r\n        const responseData = await MegaApi.requestApi({\r\n            \"a\": \"ufa\",    // action (command): u [???] file attribute\r\n            \"fah\": id,     // `h` means handler(hash, id)\r\n            \"ssl\": MegaApi.ssl,\r\n            \"r\": 1         // r [???] – It adds \".\" in response url (without this dot the url does not work)\r\n        });\r\n\r\n        //todo if [{\"p\":\"https://gfs302n203.userstorage.mega.co.nz/.yWdyTeW\",\"p0\":\"https://gfs270n873.userstorage.mega.co.nz/.Uy96JeV\"}]\r\n        return responseData[\"p\"] + \"/\" + type;\r\n    }\r\n\r\n\r\n    // todo add semaphore, not more than 31 (included) connections for each url (of bunch)\r\n    //  to test it, use `Thumbnail.getEncryptedBytes(..., false)` <- \"false\"\r\n    //  in some kind it is implemented in `FileAttributeBytes.DlBytesRequests`\r\n    /**\r\n     * @param {string} url\r\n     * @param {string|string[]} ids\r\n     * @returns {Promise<Uint8Array>} responseBytes\r\n     * @throws ETIMEDOUT, ECONNRESET\r\n     */\r\n    static async requestFileAttributeBytes(url, ids) {\r\n        /** @type Uint8Array */\r\n        let selectedIdsBinary;\r\n\r\n        if (Array.isArray(ids)) {\r\n            selectedIdsBinary = new Uint8Array(ids.length * 8);\r\n            for (let i = 0; i < ids.length; i++) {\r\n                selectedIdsBinary.set(MegaUtil.megaBase64ToArrayBuffer(ids[i]), i * 8);\r\n            }\r\n        } else {\r\n            selectedIdsBinary = MegaUtil.megaBase64ToArrayBuffer(ids);\r\n        }\r\n\r\n        /** Sometimes it can throw `connect ETIMEDOUT` or `read ECONNRESET` exception */\r\n        const callback = async () => {\r\n            console.log(\"Downloading content... \");\r\n            const response = await fetch(url, {\r\n                method: \"post\",\r\n                body: selectedIdsBinary,\r\n                headers: {\r\n                    // It's important for `node-fetch` (Node.js)\r\n                    // But it is not needed in a browser\r\n                    \"connection\": \"keep-alive\"\r\n                },\r\n                referrerPolicy: \"strict-origin-when-cross-origin\"\r\n            });\r\n            if (response.status !== 200) {\r\n                console.error(\"[response.status]\", response.status);\r\n            }\r\n            return new Uint8Array(await response.arrayBuffer());\r\n        };\r\n        const responseBytes = await MegaApi.repeatIfErrorAsync(callback);\r\n        console.log(\"[downloaded]\", responseBytes.length, \"bytes\");\r\n        return responseBytes;\r\n    }\r\n\r\n    // ----------------------------------------------------------------\r\n\r\n    /**\r\n     * @param {string} shareId\r\n     * @returns {Promise<{size: number, nodeAttributesEncoded: string,\r\n     *           downloadUrl: string, timeLeft: number, EFQ: number, MSD: number, fileAttributesStr?: string}>} nodeInfo\r\n     */\r\n    static async requestNodeInfo(shareId) {\r\n        const responseData = await MegaApi.requestApi({\r\n            \"a\": \"g\",        // Command type\r\n            \"p\": shareId,    // Content ID\r\n            \"g\": 1,          // The download link\r\n            //\"v\": 2,        // Multiple links for big files\r\n            \"ssl\": MegaApi.ssl  // HTTPS for the download link\r\n        });\r\n        //console.log(\"[responseData]\", responseData);\r\n\r\n        const prettyResponse = {\r\n            size:                  responseData[\"s\"],\r\n            nodeAttributesEncoded: responseData[\"at\"],  // Node attributes (name, hash (file fingerprint) -> mtime)\r\n\r\n            // If \"g\" is specified:\r\n            downloadUrl:           responseData[\"g\"],\r\n            timeLeft:              responseData[\"tl\"],  // Time to wait of the reset of bandwidth quota.\r\n                                                        // `0` seconds if quota is not exceeded\r\n                                                        // (It looks it is the new parameter added\r\n                                                        //                             at the beginning of March 2020)\r\n            // Useless properties: [unused]\r\n            EFQ:                   responseData[\"efq\"], // `1` – Something about the Quota – Quota enforcement?  [???]\r\n            MSD:                   responseData[\"msd\"]  // `1` – \"MegaSync download\"                             [???]\r\n        };\r\n\r\n        if (responseData[\"fa\"]) {\r\n            // File attributes (a thumbnail, a preview, [a video meta info])\r\n            // Only for an image or a video\r\n            prettyResponse.fileAttributesStr = responseData[\"fa\"];\r\n        }\r\n\r\n        return prettyResponse;\r\n    }\r\n\r\n    // The logic of nodes order that Mega returns looks like it is:\r\n    // The first node is root node,\r\n    // the next: root node children sorted by creationDate (folders have the same priority as files),\r\n    // the next: nodes (also sorted by creationDate) of each folder,\r\n    //              these folder iterates from last one to the first (like a stack works). And etc.\r\n    //\r\n    // So, a folder node is always located before the nodes that are inside it,       <-- [important]\r\n    // all nodes with the same parent are listed one by one in creationDate order,\r\n    // one level folders iterates in reverse order to `print` their children.\r\n    static async requestFolderInfo(shareId) {\r\n        const responseData = await MegaApi.requestApi({\r\n            \"a\": \"f\",\r\n            \"r\":  1, // Recursive (include sub folders/files) // if not set only root node and 1th lvl file/folder nodes\r\n            \"c\":  1, // [???][useless]\r\n            \"ca\": 1, // [???][useless]\r\n        }, {\r\n            \"n\": shareId\r\n        });\r\n        //console.log(\"[responseData]\", responseData);\r\n\r\n        const {\r\n            f: rawNodes, // array of file and folder nodes\r\n            sn, // [???][unused] // \"McPlUF51ioE\" [random]\r\n            noc // [???][unused] // \"1\"\r\n        } = responseData;\r\n\r\n\r\n        function _getShareRootNodeId(rawNodes) {\r\n            // Every node has a prefix in its `k` value – `shareRootNodeId:decryptionKey`\r\n            const firstNode = rawNodes[0];\r\n            const id = firstNode[\"k\"].match(/^[^:]+/)[0];\r\n\r\n            // In fact the first node is the share root\r\n            // Recheck:\r\n            if (id !== firstNode[\"h\"]) {\r\n                console.warn(\"ShareRootNodeId does not equal to id of the first node.\");\r\n            }\r\n\r\n            return id;\r\n        }\r\n\r\n        const shareRootNodeId = _getShareRootNodeId(rawNodes);\r\n        //console.log(\"[shareRootNodeId]\", shareRootNodeId);\r\n\r\n\r\n        function _prettifyType(type) {\r\n            switch (type) {\r\n                case  0: return \"file\";\r\n                case  1: return \"folder\";\r\n                default: return type;\r\n            }\r\n        }\r\n\r\n        function _parseKeyFromNode(node) {\r\n            const decryptionKeyStr = node[\"k\"];\r\n            // a missing key (an empty string), it's very rarely, but it can be\r\n            if (decryptionKeyStr === \"\") {\r\n                console.log(\"A missed key!\", node);\r\n                return null;\r\n            }\r\n            return decryptionKeyStr.match(/(?<=:)[\\w-_]+/)[0];\r\n        }\r\n\r\n        function _prettifyNodes(rawNodes) {\r\n            return rawNodes.map(node => {\r\n                const prettyNode = {\r\n                    id: node[\"h\"],\r\n                    parentId: node[\"p\"],\r\n                    ownerId: node[\"u\"],\r\n                    type: _prettifyType(node[\"t\"]),\r\n                    attributes: node[\"a\"],\r\n                    decryptionKeyStr: _parseKeyFromNode(node), // from node[\"k\"]\r\n                    creationDate: node[\"ts\"], // (timestamp)\r\n                };\r\n                if (prettyNode.type === \"file\") {\r\n                    prettyNode.size = node[\"s\"];\r\n                    if (node[\"fa\"]) { // only for images and videos\r\n                        prettyNode.fileAttributesStr = node[\"fa\"];\r\n                    }\r\n                }\r\n                return prettyNode;\r\n            });\r\n        }\r\n\r\n        return {nodes: _prettifyNodes(rawNodes), rootId: shareRootNodeId};\r\n    }\r\n\r\n}\r\n","import Util from \"./util.js\";\r\nimport Crypto from \"./crypto.js\";\r\nimport MegaUtil from \"./mega-util.js\";\r\nimport MegaApi from \"./mega-api.js\";\r\nimport GroupedTasks from \"./grouped-tasks.js\";\r\nimport {Semaphore} from \"./synchronization.js\";\r\n\r\n/**\r\n * The interface of a media file node\r\n * @typedef {{fileAttributesStr: string, key?: Uint8Array}} IMediaNodeSimple\r\n */\r\n\r\n/**\r\n * @typedef IMediaGettersMixin\r\n * @property {FileAttribute} thumbnail\r\n * @property {FileAttribute} preview\r\n * @property {function(): Promise<Uint8Array>} getThumbnail\r\n * @property {function(): Promise<Uint8Array>} getPreview\r\n */\r\n\r\n/**\r\n * @typedef {IMediaNodeSimple & IMediaGettersMixin} IMediaNode\r\n */\r\n\r\n/**\r\n *\r\n */\r\nclass FileAttribute {\r\n    /** @type {string} */\r\n    id;\r\n    /** @type {number} */\r\n    type;\r\n    /** @type {Bunch} */\r\n    bunch;\r\n\r\n    /**\r\n     * @param {string} id - `id`, or `handler` as Mega names it\r\n     * @param {number|*} type - 0 – thumbnail, 1 - preview, 8 - ..., 9 - ...\r\n     * @param {number|*} bunch - Attributes with the same bunch number can be requested within one API request\r\n     */\r\n    constructor(id, type, bunch) {\r\n        this.id = id;\r\n        this.type = Number(type);\r\n        this.bunch = Bunch.of(Number(bunch));\r\n    }\r\n\r\n    /**\r\n     * @param {boolean} cached=true\r\n     * @return {Promise<string>}\r\n     */\r\n    getDownloadUrl(cached = true) {\r\n        if (!Types.hasBytes(this)){\r\n            return null;\r\n        }\r\n        return this.bunch.getDownloadUrl(this, cached);\r\n    }\r\n\r\n    toString() {\r\n        return this.bunch + \":\" + this.type + \"*\" + this.id;\r\n    }\r\n}\r\n\r\nclass Bunch {\r\n    /** @type {Number} */\r\n    id;\r\n\r\n    downloadUrl = null;\r\n\r\n    /**\r\n     * The holder of the instances of this class.\r\n     * @private\r\n     * @type {Map<number, Bunch>}\r\n     */\r\n    static values = new Map();\r\n\r\n    /**\r\n     * Use `of` method to get an instance.\r\n     * @private\r\n     * @param {number} bunch\r\n     */\r\n    constructor(bunch) {\r\n        this.id = Number(bunch);\r\n    }\r\n\r\n    toString() {\r\n        return this.id.toString();\r\n    }\r\n\r\n    /**\r\n     * @param {number} bunch\r\n     * @return {Bunch}\r\n     */\r\n    static of(bunch) {\r\n        if (Bunch.values.has(bunch)) {\r\n            return Bunch.values.get(bunch);\r\n        }\r\n        const _bunch = new Bunch(bunch);\r\n        Bunch.values.set(bunch, _bunch);\r\n        return _bunch;\r\n    }\r\n\r\n    /**\r\n     * @param {FileAttribute} fileAttribute\r\n     * @param {boolean} cached=true\r\n     * @return {Promise<string>}\r\n     */\r\n    async getDownloadUrl(fileAttribute, cached = true) {\r\n        if (cached && this.hasDownloadUrl) {\r\n            return this.downloadUrl;\r\n        }\r\n        const url = await MegaApi.requestFileAttributeDownloadUrl(fileAttribute);\r\n        //todo urls\r\n        this.downloadUrl = url;\r\n        return url;\r\n    }\r\n    get hasDownloadUrl() {\r\n        return Boolean(this.downloadUrl);\r\n    }\r\n    get downloadUrl() {\r\n        return this.downloadUrl;\r\n    }\r\n}\r\n\r\nclass Types {\r\n    static thumbnail = 0;\r\n    static preview   = 1;\r\n\r\n    /**\r\n     * @param {FileAttribute} fileAttribute\r\n     * @return {boolean}\r\n     */\r\n    static hasBytes(fileAttribute) {\r\n        return fileAttribute.type === Types.preview || fileAttribute.type === Types.thumbnail;\r\n    }\r\n}\r\n\r\nexport class FileAttributeBytes {\r\n    static cached = true;\r\n    static grouped = true\r\n\r\n    /** @type {number} */ //todo use Types?\r\n    type;\r\n\r\n    get type() {\r\n        return this.type;\r\n    }\r\n\r\n    constructor(type) {\r\n        this.type = type;\r\n    }\r\n\r\n    /**\r\n     * @extends {GroupedTasks<Number, FileAttribute, String>}\r\n     */\r\n    static DlUrlRequests = class extends GroupedTasks {\r\n        async handle(entriesHolder) {\r\n            const fileAttribute = entriesHolder.first.getValue();\r\n            const result = await fileAttribute.getDownloadUrl();\r\n\r\n            for (const entry of entriesHolder.pull()) {\r\n                entry.resolve(result);\r\n            }\r\n        }\r\n\r\n        /** @type {Class<!GroupedTasks.SimpleEntry<Number, FileAttribute, String>>} */\r\n        static RequestDlUrlEntry = class extends GroupedTasks.SimpleEntry {\r\n            /** @return {boolean} */\r\n            needHandle() {\r\n                return !this.getValue().bunch.hasDownloadUrl;\r\n            }\r\n            /** @return {String} */\r\n            getResult() {\r\n                return this.getValue().bunch.downloadUrl;\r\n            }\r\n            /** @return {number} */\r\n            getKey() {\r\n                return this.getValue().bunch.id;\r\n            }\r\n        }\r\n    }\r\n    static dlUrlRequests = new FileAttributeBytes.DlUrlRequests({\r\n        entryClass: FileAttributeBytes.DlUrlRequests.RequestDlUrlEntry,\r\n        delayStrategy: GroupedTasks.execute.now\r\n    });\r\n\r\n    /**\r\n     * @param options\r\n     * @param {FileAttribute} [options.fileAttribute]\r\n     * @param {IMediaNode} [options.node]\r\n     * @param {boolean} cached=true - do not request the new URL, if already there is one, experimental use only\r\n     * @return {Promise<string>} downloadUrl\r\n     */\r\n    getDownloadUrl({fileAttribute, node}, cached = FileAttributeBytes.cached) {\r\n        const _fileAttribute = fileAttribute || FileAttributes.of(node).byType(this.type);\r\n        if (cached) {\r\n            return FileAttributeBytes.dlUrlRequests.getResult({\r\n                    value: _fileAttribute\r\n                });\r\n        }\r\n        return _fileAttribute.getDownloadUrl(false);\r\n    }\r\n\r\n    /**\r\n     * Split a grouped request (of file attribute bytes) to grouped requests of 16 requests in each.\r\n     * Up to 16 parallel downloading for a chunk.\r\n     * @extends {GroupedTasks<String, String, Uint8Array>}\r\n     */\r\n    static DlBytesRequests = class extends GroupedTasks {\r\n        async handle(entriesHolder) {\r\n            const downloadUrl = entriesHolder.key;\r\n\r\n            const semaphore = new Semaphore(16); // do not use more than 31\r\n            for (const entries of entriesHolder.parts(16)) { // use `0` to disable splitting\r\n                semaphore.sync(() => {\r\n                    return this.handlePart(downloadUrl, entries);\r\n                }).then(/*ignore promise*/);\r\n            }\r\n        }\r\n\r\n        /** @private */\r\n        async handlePart(downloadUrl, entries) {\r\n            /**\r\n             * Maps fileAttributeId to resolves\r\n             * (different nodes may have the same file attribute)\r\n             * @type {Map<string, Resolve[]>}\r\n             */\r\n            const map = new Map();\r\n\r\n            for (const entry of entries) {\r\n                const fileAttributeId = entry.getValue();\r\n                if (!map.has(fileAttributeId)) {\r\n                    map.set(fileAttributeId, []);\r\n                }\r\n                map.get(fileAttributeId).push(entry.resolve);\r\n            }\r\n\r\n            const fileAttrIDs = [...map.keys()];\r\n            const generator = FileAttributeBytes.fileAttributeBytes(downloadUrl, fileAttrIDs);\r\n            for await (const {id, dataBytes} of generator) {\r\n                const resolvers = map.get(id);\r\n                for (const resolve of resolvers) {\r\n                    resolve(dataBytes);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    static dlBytesRequests = new FileAttributeBytes.DlBytesRequests();\r\n\r\n    /**\r\n     * @param options\r\n     * @param {FileAttribute} [options.fileAttribute]\r\n     * @param {string} [options.downloadUrl]\r\n     * @param {IMediaNode} [options.node]\r\n     * @param {boolean} grouped=true - with `false` it may work a bit faster, but extremely increases\r\n     * the connection count – one per each file attribute, currently there is no limitation of connection count\r\n     * in the code (a semaphore), but Mega handles 136 connections at one moment normally\r\n     * @return {Promise<Uint8Array>} encryptedBytes\r\n     */\r\n    async getEncryptedBytes({fileAttribute, downloadUrl, node}, grouped = FileAttributeBytes.grouped) {\r\n        const _fileAttribute = fileAttribute || FileAttributes.of(node).byType(this.type);\r\n        const _downloadUrl = downloadUrl || await this.getDownloadUrl({fileAttribute: _fileAttribute});\r\n\r\n        if (grouped) {\r\n            return FileAttributeBytes.dlBytesRequests.getResult({\r\n                key: _downloadUrl,\r\n                value: _fileAttribute.id\r\n            });\r\n        }\r\n\r\n        const responseBytes = await MegaApi.requestFileAttributeBytes(_downloadUrl, _fileAttribute.id);\r\n        return FileAttributeBytes.parseBytes(responseBytes).dataBytes;\r\n    }\r\n\r\n    /**\r\n     * @param {string} downloadUrl\r\n     * @param {string[]} fileAttrIDs\r\n     * @return {AsyncGenerator<{dataBytes: Uint8Array, id: string}>}\r\n     */\r\n    static async *fileAttributeBytes(downloadUrl, fileAttrIDs) {\r\n        const responseBytes = await MegaApi.requestFileAttributeBytes(downloadUrl, fileAttrIDs);\r\n\r\n        for (let i = 0, offset = 0; i < fileAttrIDs.length; i++) {\r\n            const {id, dataBytes} = FileAttributeBytes.parseBytes(responseBytes, offset);\r\n            yield {id, dataBytes};\r\n            offset += 12 + dataBytes.length;\r\n        }\r\n    }\r\n\r\n    /** @private */\r\n    static parseBytes(bytes, offset = 0) {\r\n        const idBytes     = bytes.subarray(offset,      offset +  8);\r\n        const lengthBytes = bytes.subarray(offset + 8,  offset + 12);\r\n        const length      = Util.arrayBufferToLong(lengthBytes);\r\n        const dataBytes   = bytes.subarray(offset + 12, offset + 12 + length);\r\n        const id          = MegaUtil.arrayBufferToMegaBase64(idBytes);\r\n        return {id, dataBytes};\r\n    }\r\n\r\n    /**\r\n     * @param options\r\n     * @param {FileAttributes} [options.fileAttributes]\r\n     * @param {Uint8Array} [options.encryptedBytes]\r\n     * @param {IMediaNode} [options.node]\r\n     * @param {string} [options.downloadUrl]\r\n     * @return {Promise<Uint8Array>}\r\n     */\r\n    async getBytes({fileAttributes, encryptedBytes, node, downloadUrl}) {\r\n        const _fileAttributes = fileAttributes || FileAttributes.of(node);\r\n        const fileAttribute = _fileAttributes.byType(this.type);\r\n        const _encryptedBytes = encryptedBytes || await this.getEncryptedBytes({fileAttribute, downloadUrl, node});\r\n\r\n        if (!_fileAttributes.nodeKey) {\r\n            if (FileAttributes.strictMode) {\r\n                throw \"No key specified for the file attribute decryption.\";\r\n            } else {\r\n                console.log(\"No key specified for the file attribute decryption. Skipping the decryption.\");\r\n                return _encryptedBytes;\r\n            }\r\n        }\r\n        console.log(\"Decryption of a file attribute...\");\r\n        return Crypto.decryptAES(_encryptedBytes, _fileAttributes.nodeKey, {padding: \"ZeroPadding\"});\r\n    }\r\n}\r\n\r\nexport default class FileAttributes {\r\n\r\n    /**\r\n     * If `false` (default) returns not decrypted file attribute if no node key specified.\r\n     * If `true` `FileAttributes.getBytes` will throw the exception.\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    static strictMode = false;\r\n\r\n    /** @type {FileAttribute[]} */\r\n    fileAttributes;\r\n    /** @type {Uint8Array} */\r\n    nodeKey;\r\n\r\n    constructor(node) {\r\n        const fileAttributes = [];\r\n\r\n        const chunks = node.fileAttributesStr.split(\"\\/\");\r\n        chunks.forEach(chunk => {\r\n            const groups = chunk.match(/(?<bunch>\\d+):(?<type>\\d+)\\*(?<id>.+)/).groups;\r\n            const {id, type, bunch} = groups;\r\n            fileAttributes.push(new FileAttribute(id, type, bunch));\r\n        });\r\n\r\n        this.fileAttributes = fileAttributes;\r\n        this.nodeKey = node.key || null;\r\n    }\r\n\r\n    /** Example output: \"924:1*sqbpWSbonCU/925:0*lH0B2ump-G8\" */\r\n    toString() {\r\n        return this.fileAttributes.join(\"/\");\r\n    }\r\n\r\n    /**\r\n     * Get file attribute by type (0, 1, 8, or 9)\r\n     * @param {number} type\r\n     * @return {FileAttribute}\r\n     */\r\n    byType(type) {\r\n        return this.fileAttributes.find(att => att.type === type);\r\n    }\r\n\r\n    // ========\r\n\r\n    /** @type {Map<String, FileAttributes>} */\r\n    static values = new Map();\r\n\r\n    /**\r\n     * @param {IMediaNode} node\r\n     */\r\n    static add(node) {\r\n        if (!FileAttributes.values.get(node.fileAttributesStr)) {\r\n            FileAttributes.values.set(node.fileAttributesStr, new FileAttributes(node));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {IMediaNode} node\r\n     * @return {FileAttributes}\r\n     */\r\n    static get(node) {\r\n        return FileAttributes.values.get(node.fileAttributesStr);\r\n    }\r\n\r\n    /**\r\n     * @param {IMediaNode} node\r\n     * @return {FileAttributes}\r\n     */\r\n    static of(node) {\r\n        FileAttributes.add(node);\r\n        return FileAttributes.get(node);\r\n    }\r\n\r\n    // ========\r\n\r\n    /** Like a static class, but with polymorphism */\r\n    static Thumbnail = new FileAttributeBytes(Types.thumbnail);\r\n    static Preview   = new FileAttributeBytes(Types.preview);\r\n\r\n    /**\r\n     * @param {IMediaNode} node\r\n     * @return {Promise<Uint8Array>}\r\n     */\r\n    static getThumbnail(node) {\r\n        return FileAttributes.getAttribute(node, FileAttributes.Thumbnail);\r\n    }\r\n    /**\r\n     * @param {IMediaNode} node\r\n     * @return {Promise<Uint8Array>}\r\n     */\r\n    static getPreview(node) {\r\n        return FileAttributes.getAttribute(node, FileAttributes.Preview);\r\n    }\r\n\r\n    /**\r\n     * NB: can be not only JPG (FF D8 FF (E0)), but PNG (89 50 4E 47 0D 0A 1A 0A) too, for example.\r\n     * https://en.wikipedia.org/wiki/List_of_file_signatures\r\n     *\r\n     * @param {IMediaNode} node\r\n     * @param {FileAttributeBytes} typeClass\r\n     * @return {Promise<Uint8Array>}\r\n     */\r\n    static getAttribute(node, typeClass) {\r\n        return typeClass.getBytes({node});\r\n    }\r\n\r\n}","/**\r\n * This class represents the share,\r\n * the information that is needed to get the access to a shared content – a folder, or a file.\r\n *\r\n * Usually you have the URL, that contains that data.\r\n * `Share.fromUrl(url)` parses the URL and returns the instance of this class.\r\n */\r\nexport default class Share {\r\n    /** @type {string} */\r\n    id;\r\n    /** @type {string} */\r\n    decryptionKeyStr;\r\n    /** @type {boolean} */\r\n    isFolder;\r\n    /** @type {string} */\r\n    selectedFolderId;\r\n    /** @type {string} */\r\n    selectedFileId;\r\n\r\n    /**\r\n     * @private\r\n     * @param {{\r\n     *    id: string,\r\n     *    decryptionKeyStr?: string,\r\n     *    isFolder?: boolean,\r\n     *    selectedFolderId?: string,\r\n     *    selectedFileId?: string\r\n     *  }} shareParts\r\n     */\r\n    constructor(shareParts) {\r\n        Object.assign(this, shareParts);\r\n    }\r\n\r\n    /** @return {string} */\r\n    toString() {\r\n        return \"\" +\r\n            \"[id]               \" + this.id               + \"\\n\" +\r\n            \"[decryptionKeyStr] \" + this.decryptionKeyStr + \"\\n\" +\r\n            \"[isFolder]         \" + this.isFolder         + \"\\n\" +\r\n            \"[selectedFolderId] \" + this.selectedFolderId + \"\\n\" +\r\n            \"[selectedFileId]   \" + this.selectedFileId   + \"\\n\" +\r\n            \"[url]              \" + this.getUrl()         + \"\\n\" +\r\n            \"[url-legacy]       \" + this.getUrl(true);\r\n    }\r\n\r\n    /**\r\n     * @param {string|URL} url - URL\r\n     * @return {boolean}\r\n     */\r\n    static isFolder(url) {\r\n        return Share.fromUrl(url).isFolder;\r\n    }\r\n\r\n    /** @return {string} */\r\n    get selectedId() {\r\n        return this.selectedFileId || this.selectedFolderId || null;\r\n    }\r\n\r\n    //todo? create a singleton/caching for at least one last url? to do not parse several times the same url.\r\n    /**\r\n     * @see URLS\r\n     * @param {string|URL} url - URL\r\n     * @returns {Share}\r\n     */\r\n    static fromUrl(url) {\r\n        const _url = url.toString(); // if passed a URL object\r\n        const isLegacyURL = /#F!|#!/;\r\n        let regExp;\r\n\r\n        if (_url.match(isLegacyURL)) {\r\n            regExp = /(?<type>(?<isFolder>#F!)|(?<isFile>#!))(?<id>[\\w-_]+)(?<keyPrefix>!(?=[\\w-_]{22,43})|!(?=[!?])|!(?![\\w-_]{8}))?(?<key>(?<=!)[\\w-_]{22,43})?(?<selected>((?<selectedFilePrefix>\\?)|(?<selectedFolderPrefix>!?))((?<file>(?<=\\?)[\\w-_]+)|(?<folder>(?<=!)[\\w-_]+)))?/;\r\n        } else {\r\n            regExp = /(?<type>(?<isFolder>folder\\/)|(?<isFile>file\\/))(?<id>[\\w-_]+)(?<keyPrefix>#)?(?<key>(?<=#)[\\w-_]{22,43})?(?<selected>((?<selectedFilePrefix>\\/file\\/)|(?<selectedFolderPrefix>\\/folder\\/))((?<file>(?<=\\/file\\/)[\\w-_]+)|(?<folder>(?<=\\/folder\\/)[\\w-_]+)))?/;\r\n        }\r\n\r\n        const match = _url.match(regExp);\r\n        if (!match) {\r\n            throw `Unsupported URL (\"${_url}\")`;\r\n        }\r\n        const {groups} = match;\r\n\r\n        const isFolder = Boolean(groups.isFolder);\r\n        /** Content ID */\r\n        const id = groups.id;\r\n        /** Decryption key encoded with Mega's base64 */\r\n        const decryptionKeyStr = groups.key    || \"\";\r\n        const selectedFolderId = groups.folder || \"\";\r\n        const selectedFileId   = groups.file   || \"\";\r\n\r\n        return new Share({id, decryptionKeyStr, isFolder, selectedFolderId, selectedFileId});\r\n    }\r\n\r\n    /**\r\n     * @param shareParts\r\n     * @param {string}   shareParts.id\r\n     * @param {string}  [shareParts.decryptionKeyStr=\"\"]\r\n     * @param {boolean} [shareParts.isFolder=false]\r\n     * @param {string}  [shareParts.selectedFolderId=\"\"]\r\n     * @param {string}  [shareParts.selectedFileId=\"\"]\r\n     * @return {Share}\r\n     */\r\n    static fromParts({id, decryptionKeyStr = \"\", isFolder = false, selectedFolderId = \"\", selectedFileId = \"\"}) {\r\n        return new Share({id, decryptionKeyStr, isFolder, selectedFolderId, selectedFileId});\r\n    }\r\n\r\n    /**\r\n     * Returns the url string for a share.\r\n     * I prefer to use the key separator when there is no key, but there is a selected node.\r\n     * Note: `Share.fromUrl(url).getUrl()` may not be equal to `url` (even for the same format)\r\n     *\r\n     * @see URLS\r\n     * @param {boolean} oldFormat\r\n     * @returns {string}\r\n     */\r\n    getUrl(oldFormat = false) {\r\n        let result;\r\n        const prefixes = {\r\n            folder:    oldFormat ? \"#F\" : \"folder\",\r\n            file:      oldFormat ? \"#\"  : \"file\",\r\n            id:        oldFormat ? \"!\"  : \"/\",\r\n            key:       oldFormat ? \"!\"  : \"#\",\r\n            selFile:   oldFormat ? \"?\"  : \"/file/\",\r\n            selFolder: oldFormat ? \"!\"  : \"/folder/\",\r\n        };\r\n\r\n        let selected = \"\";\r\n        if (this.selectedFileId) {\r\n            selected = prefixes.selFile + this.selectedFileId;\r\n        } else if (this.selectedFolderId) {\r\n            selected = prefixes.selFolder + this.selectedFolderId;\r\n        }\r\n\r\n        result = \"https://mega.nz/\" +\r\n            (this.isFolder ? prefixes.folder : prefixes.file) +\r\n            prefixes.id + this.id +\r\n            (this.decryptionKeyStr ? prefixes.key + this.decryptionKeyStr : \"\") +\r\n            (selected && !this.decryptionKeyStr ? prefixes.key + selected : selected);\r\n\r\n        return result;\r\n    }\r\n}","import Util from \"./util.js\";\r\nimport MegaUtil from \"./mega-util.js\";\r\nimport MegaApi from \"./mega-api.js\";\r\nimport FileAttributes from \"./file-attributes.js\";\r\nimport Share from \"./share.js\";\r\n\r\n\r\n//todo the most basic class with [Symbol.toStringTag]: \"MegaNode\"\r\n\r\nclass BasicFolderShareNode {\r\n    [Symbol.toStringTag] = \"BasicFolderShareNode\";\r\n    constructor(node, masterKey) {\r\n        this.id           = node.id;\r\n        this.parentId     = node.parentId;\r\n        this.parent       = node.parent || null;\r\n        this.ownerId      = node.ownerId;\r\n        this.creationDate = node.creationDate;\r\n\r\n        if (masterKey && node.decryptionKeyStr) {\r\n            const decryptionKeyEncrypted = MegaUtil.megaBase64ToArrayBuffer(node.decryptionKeyStr);\r\n            this._decryptionKey = MegaUtil.decryptKey(decryptionKeyEncrypted, masterKey);\r\n        } else {\r\n            this._decryptionKey = null;\r\n        }\r\n    }\r\n    type;\r\n    id;\r\n    parentId;\r\n    parent;\r\n    ownerId;\r\n    creationDate;\r\n    _decryptionKey;\r\n\r\n    get key() {\r\n        return this._decryptionKey;\r\n    };\r\n    name; // [requires key]\r\n\r\n    /**\r\n     * Returns the array of parents names from the root node\r\n     * @return {string[]}\r\n     */\r\n    get path() {\r\n        if (this.parent) {\r\n            return [...this.parent.path, this.parent.name];\r\n        }\r\n        return [];\r\n    }\r\n\r\n    /** @return {RootFolderNode} */\r\n    get root() {\r\n        return this.parent.type === \"rootFolder\" ? this.parent : this.parent.root;\r\n    }\r\n}\r\n\r\nclass FileNode extends BasicFolderShareNode {\r\n    [Symbol.toStringTag] = \"FileNode\";\r\n    constructor(node, masterKey) {\r\n        super(node, masterKey);\r\n        this.type = \"file\";\r\n        this.size = node.size;\r\n\r\n        if (masterKey && node.decryptionKeyStr) {\r\n            const {\r\n                name,\r\n                serializedFingerprint\r\n            } = MegaUtil.parseEncodedNodeAttributes(node.attributes, this.key);\r\n            this.name = name;\r\n\r\n            const {\r\n                modificationDate,\r\n                fileChecksum      // [unused][???]\r\n            } = MegaUtil.parseFingerprint(serializedFingerprint);\r\n            this.modificationDate = modificationDate;\r\n        } else {\r\n            this.name = this.modificationDate = null;\r\n        }\r\n    }\r\n    size;\r\n\r\n    _keyParts;\r\n    get key() {\r\n        if (!this._keyParts) {\r\n            if (super.key) {\r\n                this._keyParts = MegaUtil.decryptionKeyToParts(super.key);\r\n            } else {\r\n                this._keyParts = {iv: null, metaMac: null, key: null};\r\n            }\r\n        }\r\n        return this._keyParts.key;\r\n    };\r\n    modificationDate;   // [requires key]\r\n    get mtime() {       // An alias\r\n        return this.modificationDate;\r\n    }\r\n    get modificationDateFormatted() {\r\n        return Util.secondsToFormattedString(this.modificationDate);\r\n    }\r\n\r\n    get downloadUrl() { // not implemented\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * @implements IMediaNodeSimple\r\n * @mixes IMediaGettersMixin\r\n */\r\n// todo: add file attribute support for 8, 9 (9 may not exists)\r\nclass MediaFileNode extends FileNode {\r\n    [Symbol.toStringTag] = \"MediaFileNode\";\r\n    constructor(node, masterKey) {\r\n        super(node, masterKey);\r\n        this.type = \"mediaFile\";\r\n        this.fileAttributesStr = node.fileAttributesStr;\r\n    }\r\n    fileAttributesStr; // [requires key]\r\n\r\n    //todo mixin for it\r\n    /** @returns {Promise<Uint8Array>} */\r\n    getThumbnail() {\r\n        return FileAttributes.getThumbnail(this);\r\n    };\r\n    /** @returns {Promise<Uint8Array>} */\r\n    getPreview() {\r\n        return FileAttributes.getPreview(this);\r\n    };\r\n\r\n    get thumbnail() { // todo others\r\n        return FileAttributes.of(this).byType(FileAttributes.Thumbnail.type);\r\n    }\r\n\r\n    get preview() {\r\n        return FileAttributes.of(this).byType(FileAttributes.Preview.type);\r\n    }\r\n}\r\n\r\nclass FolderNode extends BasicFolderShareNode {\r\n    [Symbol.toStringTag] = \"FolderNode\";\r\n    constructor(node, masterKey) {\r\n        super(node, masterKey);\r\n        this.type = \"folder\";\r\n\r\n        if (masterKey) {\r\n            const {\r\n                name\r\n            } = MegaUtil.parseEncodedNodeAttributes(node.attributes, this.key);\r\n            this.name = name;\r\n        } else {\r\n            this.name = null;\r\n        }\r\n    }\r\n    folders = [];\r\n    files = [];\r\n\r\n    _size = 0;\r\n    get size() {\r\n        return this._size; // todo: recursive calculate the size\r\n    };\r\n}\r\n\r\nclass RootFolderNode extends FolderNode {\r\n    get [Symbol.toStringTag]() { return \"RootFolderNode\"; };\r\n    constructor(node, masterKey) {\r\n        super(node, masterKey);\r\n        this.type = \"rootFolder\";\r\n    }\r\n    /** @return {RootFolderNode} */\r\n    get root() {\r\n        return this;\r\n    }\r\n}\r\n\r\n\r\nclass SharedFileNode {\r\n    [Symbol.toStringTag] = \"SharedFileNode\";\r\n    constructor(share, nodeInfo) {\r\n        this.type = \"sharedFile\";\r\n        this.id = share.id; // in fact it is not real file node id (for every new generated share url you get new id)\r\n\r\n        if (share.decryptionKeyStr) {\r\n            const decryptionKey = MegaUtil.megaBase64ToArrayBuffer(share.decryptionKeyStr);\r\n            const {\r\n                iv,      // [unused][???] // probably it is needed for decryption (not implemented)\r\n                metaMac, // [unused][???]\r\n                key\r\n            } = MegaUtil.decryptionKeyToParts(decryptionKey);\r\n            this.key = key;\r\n        } else {\r\n            this.key = null;\r\n        }\r\n\r\n        const {\r\n            size,\r\n            nodeAttributesEncoded,\r\n            downloadUrl,\r\n            timeLeft,\r\n        } = nodeInfo;\r\n\r\n        this.size = size;\r\n        this._meta = {downloadUrl, timeLeft};\r\n\r\n        if (share.decryptionKeyStr) {\r\n            const {\r\n                name,\r\n                serializedFingerprint\r\n            } = MegaUtil.parseEncodedNodeAttributes(nodeAttributesEncoded, this.key);\r\n\r\n            const {\r\n                modificationDate,\r\n                fileChecksum   // [unused][???]\r\n            } = MegaUtil.parseFingerprint(serializedFingerprint);\r\n\r\n            this.name = name;\r\n            this.modificationDate = modificationDate;\r\n        } else {\r\n            this.name = this.modificationDate = null;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    type;\r\n    id;\r\n    size;\r\n\r\n    key;\r\n    name;\r\n    modificationDate;\r\n    get mtime() { // An alias\r\n        return this.modificationDate;\r\n    }\r\n    get modificationDateFormatted() {\r\n        return Util.secondsToFormattedString(this.modificationDate);\r\n    }\r\n\r\n    _meta;\r\n    get timeLeft() {\r\n        return this._meta.timeLeft;\r\n    }\r\n    get downloadUrl() {\r\n        return this._meta.downloadUrl;\r\n    }\r\n}\r\n\r\nclass SharedMediaFileNode extends SharedFileNode {\r\n    [Symbol.toStringTag] = \"SharedMediaFileNode\";\r\n    constructor(share, nodeInfo) {\r\n        super(share, nodeInfo);\r\n        this.type = \"sharedMediaFile\";\r\n        this.fileAttributesStr = nodeInfo.fileAttributesStr;\r\n    }\r\n    fileAttributesStr;\r\n\r\n    //todo mixin for it\r\n    /** @returns {Promise<Uint8Array>} */\r\n    getThumbnail() {\r\n        return FileAttributes.getThumbnail(this);\r\n    };\r\n    /** @returns {Promise<Uint8Array>} */\r\n    getPreview() {\r\n        return FileAttributes.getPreview(this);\r\n    };\r\n}\r\n\r\n\r\n\r\n/**\r\n * Static factory methods for node creating\r\n *\r\n * Well, not the best JSDoc signatures, may be rework it later\r\n */\r\nclass Nodes {\r\n\r\n    /**\r\n     * @param {string|URL} url\r\n     * @returns {Promise<SharedFileNode|SharedMediaFileNode|RootFolderNode|FolderNode|FileNode|MediaFileNode>\r\n     *     |Promise<(SharedFileNode|SharedMediaFileNode)[]|(RootFolderNode,FolderNode,FileNode,MediaFileNode)[]>}\r\n     */\r\n    static async of(url) {\r\n        const share = Share.fromUrl(url);\r\n        return share.isFolder ? Nodes.getFolderNodes(share) : Nodes.getSharedNode(share);\r\n    }\r\n\r\n    /**\r\n     * @param {string|URL} url\r\n     * @returns {Promise<SharedFileNode|SharedMediaFileNode|RootFolderNode|FolderNode|FileNode|MediaFileNode>}\r\n     */\r\n    static async node(url) {\r\n        const share = Share.fromUrl(url);\r\n        if (share.isFolder) {\r\n            const nodes = await Nodes.getFolderNodes(share);\r\n            if (nodes.selected) {\r\n                return nodes.selected;\r\n            } else {\r\n                return nodes.root;\r\n            }\r\n        } else {\r\n            return Nodes.getSharedNode(share);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {string|URL} url\r\n     * @returns {Promise<(SharedFileNode|SharedMediaFileNode)[]|(RootFolderNode,FolderNode,FileNode,MediaFileNode)[]>}\r\n     */\r\n    static async nodes(url) {\r\n        const share = Share.fromUrl(url);\r\n        if (share.isFolder) {\r\n            return Nodes.getFolderNodes(share);\r\n        } else {\r\n            return [await Nodes.getSharedNode(share)];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {Share} share\r\n     * @returns {Promise<SharedFileNode|SharedMediaFileNode>}\r\n     */\r\n    static async getSharedNode(share) {\r\n        const nodeInfo = await MegaApi.requestNodeInfo(share.id);\r\n        if (nodeInfo.fileAttributesStr) {\r\n            return new SharedMediaFileNode(share, nodeInfo);\r\n        } else {\r\n            return new SharedFileNode(share, nodeInfo);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {Share} share\r\n     * @returns {Promise<(RootFolderNode,FolderNode,FileNode,MediaFileNode)[]>} [note] The array have mixed type content\r\n     */\r\n    static async getFolderNodes(share) {\r\n\r\n        const masterKey = share.decryptionKeyStr ? MegaUtil.megaBase64ToArrayBuffer(share.decryptionKeyStr) : null;\r\n        //logger.debug(\"[masterKey]\", masterKey);\r\n\r\n        const {\r\n            nodes,\r\n            rootId\r\n        } = await MegaApi.requestFolderInfo(share.id);\r\n        //logger.debug(`[requestFolderInfo(\"${share.id}\").nodes]`, nodes);\r\n\r\n        const folders = new Map(); // [note] JS's HashMap holds the insert order\r\n        const files = [];\r\n\r\n\r\n        // `masterKey` is null when the share has no specified key,\r\n        // `node.decryptionKeyStr` is null when `k` of node info (from API) is an empty string (Mega's bug)\r\n        //todo either handle it here (new classes for nodes without a key)\r\n        // or in the node constructor modify its type to indicate this thing\r\n        for (let i = 0; i < nodes.length; i++) {\r\n\r\n            const node = nodes[i];\r\n            let resultNode;\r\n\r\n            node.parent = folders.get(node.parentId); // `undefine` for root\r\n\r\n            if (node.type === \"file\") {\r\n                if (node.fileAttributesStr) {\r\n                    resultNode = new MediaFileNode(node, masterKey);\r\n                } else {\r\n                    resultNode = new FileNode(node, masterKey);\r\n                }\r\n                files.push(resultNode);\r\n\r\n                // the parent node is always located before the child node, no need to check its existence [1][note]\r\n                folders.get(resultNode.parentId).files.push(resultNode);\r\n\r\n            } else if (node.type === \"folder\") {\r\n                if (node.id === rootId) { // or `if (i === 0)`\r\n                    resultNode = new RootFolderNode(node, masterKey);\r\n                } else {\r\n                    resultNode = new FolderNode(node, masterKey);\r\n                    folders.get(resultNode.parentId).folders.push(resultNode); // see [1] note\r\n                }\r\n                folders.set(node.id, resultNode);\r\n            }\r\n\r\n            nodes[i] = null;\r\n        }\r\n\r\n        // todo: rework – make an iterable class with these getters\r\n        const resultArray = [...folders.values(), ...files];\r\n        const root = folders.get(rootId);\r\n        const selected = resultArray.find(node => node.id === share.selectedId);\r\n        Object.defineProperty(resultArray, \"root\",     { get: () => root });\r\n        Object.defineProperty(resultArray, \"selected\", { get: () => selected });\r\n        Object.defineProperty(resultArray, \"folders\",  { get: () => [...folders.values()] });\r\n        Object.defineProperty(resultArray, \"files\",    { get: () => files });\r\n        //todo .mediaNodes\r\n\r\n        return resultArray;\r\n    }\r\n\r\n    static isMediaNode(node) {\r\n        return node.type === \"sharedMediaFile\" || node.type === \"mediaFile\";\r\n    }\r\n}\r\n\r\nexport default Nodes;\r\nexport {\r\n    FolderNode, RootFolderNode,\r\n    FileNode, MediaFileNode,\r\n    SharedFileNode, SharedMediaFileNode,\r\n    Nodes\r\n};","import {Nodes} from \"./nodes.js\";\r\nexport const nodes = Nodes.nodes;\r\nexport const node  = Nodes.node;\r\n\r\n\r\nexport {default as FileAttributes, FileAttributeBytes} from \"./file-attributes.js\";\r\n// export {default as Crypto} from \"./crypto.js\";\r\n// export {default as GroupedTasks} from \"./grouped-tasks.js\";\r\nexport {default as MegaApi} from \"./mega-api.js\";\r\nexport {default as MegaUtil} from \"./mega-util.js\";\r\nexport {default as Nodes} from \"./nodes.js\";\r\nexport {default as Share} from \"./share.js\";\r\nexport * as Synchronization from \"./synchronization.js\";\r\nexport {default as Util} from \"./util.js\";"]}